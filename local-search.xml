<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>课程作业3：NFA与DFA</title>
    <link href="/GandalfBlog/2024/03/17/work3/"/>
    <url>/GandalfBlog/2024/03/17/work3/</url>
    
    <content type="html"><![CDATA[<h2 id="3-3-5"><a href="#3-3-5" class="headerlink" title="3.3.5"></a>3.3.5</h2><h3 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h3><p>正则表达式：other-&gt;[bcdfghjklmnpqrstvwxyz]</p><p>​need-&gt;other* a (other|a)* e (other|e)* i (other|i)* o (other|o)* u (other|u)*</p><p>NFA:</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-3/1.jpg" alt="1"></p><p>NFA转DFA表：</p><table><thead><tr><th align="center">I</th><th align="center"></th><th align="center">Ia</th><th align="center">Ie</th><th align="center">Ii</th><th align="center">Io</th><th align="center">Iu</th><th align="center">Iother</th></tr></thead><tbody><tr><td align="center">1,2</td><td align="center"></td><td align="center">3,4</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1,2</td></tr><tr><td align="center">3,4</td><td align="center"></td><td align="center">3,4</td><td align="center">5,6</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">3,4</td></tr><tr><td align="center">5,6</td><td align="center"></td><td align="center"></td><td align="center">5,6</td><td align="center">7,8</td><td align="center"></td><td align="center"></td><td align="center">5,6</td></tr><tr><td align="center">7,8</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">7,8</td><td align="center">9,10</td><td align="center"></td><td align="center">7,8</td></tr><tr><td align="center">9,10</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">9,10</td><td align="center">11,12</td><td align="center">9,10</td></tr><tr><td align="center">11,12</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">11,12</td><td align="center">11,12</td></tr></tbody></table><h3 id="6"><a href="#6" class="headerlink" title="(6)"></a>(6)</h3><p>正则表达式：b(aa)*b|(a(aa)*b(b(aa)*b)*b(aa)*ab|a)</p><p>NFA：</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-3/2.png"></p><p>NFA转DFA表：</p><p>太复杂了不画….</p><h3 id="8"><a href="#8" class="headerlink" title="(8)"></a>(8)</h3><p>正则表达式：b* (a+b?)*</p><p>NFA：</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-3/3.jpg" alt="2"></p><p>NFA转DFA表：</p><table><thead><tr><th align="center">I</th><th></th><th align="center">Ia</th><th align="center">Ib</th></tr></thead><tbody><tr><td align="center">1,7</td><td></td><td align="center"></td><td align="center">1,2,3,7</td></tr><tr><td align="center">1,2,3,7</td><td></td><td align="center">3,4,6,7</td><td align="center">1,2,3,7</td></tr><tr><td align="center">3,4,6,7</td><td></td><td align="center">3,4,6,7</td><td align="center">3,5,6,7</td></tr><tr><td align="center">3,5,6,7</td><td></td><td align="center">3,4,6,7</td><td align="center"></td></tr></tbody></table><h3 id="9"><a href="#9" class="headerlink" title="(9)"></a>(9)</h3><p>正则表达式：b* | b* a+ | b* a+ b a*</p><p>NFA：</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-3/4.jpg" alt="4"></p><p>NFA转DFA表：</p><table><thead><tr><th align="center">I</th><th align="center"></th><th align="center">Ia</th><th align="center">Ib</th></tr></thead><tbody><tr><td align="center">1,2,4,9</td><td align="center">1</td><td align="center">4,5,9</td><td align="center">2,3,4,6,7,9</td></tr><tr><td align="center">4,5,9</td><td align="center">2</td><td align="center">4,5,9</td><td align="center">6,7,9</td></tr><tr><td align="center">2,3,4,6,7,9</td><td align="center">3</td><td align="center">4,5,7,8,9</td><td align="center">2,3,4,6,7,9</td></tr><tr><td align="center">6,7,9</td><td align="center">4</td><td align="center">7,8,9</td><td align="center"></td></tr><tr><td align="center">4,5,7,8,9</td><td align="center">5</td><td align="center">4,5,7,8,9</td><td align="center">6,7,9</td></tr><tr><td align="center">7,8,9</td><td align="center">6</td><td align="center">7,8,9</td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CPTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>课程作业2：书本例题答案</title>
    <link href="/GandalfBlog/2024/03/05/work2/"/>
    <url>/GandalfBlog/2024/03/05/work2/</url>
    
    <content type="html"><![CDATA[<h2 id="3-3-1"><a href="#3-3-1" class="headerlink" title="3.3.1"></a>3.3.1</h2><h3 id="1-输入字符集"><a href="#1-输入字符集" class="headerlink" title="1. 输入字符集"></a><strong>1. 输入字符集</strong></h3><table><thead><tr><th>语言</th><th>输入字符集描述</th></tr></thead><tbody><tr><td><strong>C</strong></td><td>- 基本源字符集：ASCII字母、数字、空格和一些符号（如<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>等）。 - C11及以后支持Unicode（通过<code>\uXXXX</code>或<code>\UXXXXXXXX</code>）。</td></tr><tr><td><strong>C++</strong></td><td>- 类似C，基本源字符集为ASCII。 - C++11起支持Unicode字符直接出现在源码中（若文件编码支持，如UTF-8）。</td></tr><tr><td><strong>Java</strong></td><td>- 基于Unicode（如UTF-8或UTF-16），所有字符（包括注释和标识符）均以Unicode处理。</td></tr><tr><td><strong>SQL</strong></td><td>- 依赖具体实现，通常支持ASCII或扩展字符集（如UTF-8）。 - 现代数据库（如MySQL、PostgreSQL）默认使用UTF-8。</td></tr></tbody></table><hr><h3 id="2-数字常量的词法形式"><a href="#2-数字常量的词法形式" class="headerlink" title="2. 数字常量的词法形式"></a><strong>2. 数字常量的词法形式</strong></h3><h4 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a><strong>整数常量</strong></h4><table><thead><tr><th>语言</th><th>格式</th></tr></thead><tbody><tr><td><strong>C</strong></td><td>- 十进制：<code>123</code> - 八进制：<code>0123</code>（以<code>0</code>开头） - 十六进制：<code>0x1A3</code>或<code>0X1a3</code> - C23支持二进制：<code>0b1010</code></td></tr><tr><td><strong>C++</strong></td><td>同C，C++14起支持二进制<code>0b1010</code>。</td></tr><tr><td><strong>Java</strong></td><td>- 十进制、八进制、十六进制（同C） - Java7+支持二进制<code>0b1010</code>及数字分隔符（<code>1_000_000</code>）。</td></tr><tr><td><strong>SQL</strong></td><td>- 十进制：<code>123</code> - 科学计数法：<code>1E5</code>（某些实现支持十六进制，如MySQL的<code>X&#39;1A3&#39;</code>）。</td></tr></tbody></table><h4 id="浮点数常量"><a href="#浮点数常量" class="headerlink" title="浮点数常量"></a><strong>浮点数常量</strong></h4><table><thead><tr><th>语言</th><th>格式</th></tr></thead><tbody><tr><td><strong>C</strong></td><td>- 小数点形式：<code>3.14</code> - 指数形式：<code>3e-5</code>或<code>3E+5</code> - 后缀：<code>f</code>（float）、<code>l</code>（long double）。 - C99起支持十六进制浮点：<code>0x1.ap2</code></td></tr><tr><td><strong>C++</strong></td><td>同C。</td></tr><tr><td><strong>Java</strong></td><td>类似C，后缀为<code>f</code>（float）、<code>d</code>（double）。 支持数字分隔符：<code>3.141_592</code>（Java7+）。</td></tr><tr><td><strong>SQL</strong></td><td>- 简单形式：<code>3.14</code> - 科学计数法：<code>3.14E-2</code>。</td></tr></tbody></table><hr><h3 id="3-标识符的词法形式"><a href="#3-标识符的词法形式" class="headerlink" title="3. 标识符的词法形式"></a><strong>3. 标识符的词法形式</strong></h3><table><thead><tr><th>语言</th><th>规则</th></tr></thead><tbody><tr><td><strong>C</strong></td><td>- 以字母或下划线开头，后续为字母、数字或下划线。 - C99起支持Unicode字符（通过转义序列，如<code>\u03B1</code>）。 - 某些编译器（如GCC）扩展支持<code>$</code>。</td></tr><tr><td><strong>C++</strong></td><td>同C，C++11起允许直接使用Unicode字符（如<code>int 变量 = 0;</code>）。</td></tr><tr><td><strong>Java</strong></td><td>- 以字母、下划线（<code>_</code>）或美元符号（<code>$</code>）开头，后续可为这些字符或数字。 - 支持直接使用Unicode字符（如<code>String 名字 = &quot;张三&quot;;</code>）。</td></tr><tr><td><strong>SQL</strong></td><td>- 标准：字母开头，后续为字母、数字或下划线。 - 扩展（如MySQL）：可用反引号包裹特殊字符（如<code>select</code>）。 - 区分大小写依赖具体实现。</td></tr></tbody></table><h2 id="3-3-2"><a href="#3-3-2" class="headerlink" title="3.3.2"></a>3.3.2</h2><ol><li><p>a开头，a结尾，中间任意数量(包括0个)a或b组合</p></li><li><p>任意数量a和任意数量b</p></li><li><p>任意数量a和任意数量b，倒数第三个得是a</p></li><li><p>四个任意数量a的子串通过三个单个b拼接</p></li><li><p>包含a和b的偶数串</p></li></ol><h2 id="3-3-3"><a href="#3-3-3" class="headerlink" title="3.3.3"></a>3.3.3</h2><ol><li><p>n +1, 字符串字符数+1(空前缀)</p></li><li><p>n + 1,字符串字符数+1(空后缀)</p></li><li><p>n - 1, 不包含字符串和空,上两个-2</p></li><li><p>C(n + 1, 2) + 1(例如ab子串就是a ，b，ab，空—&gt;C(3,2) + 1 &#x3D; 4</p></li><li><p>Σ(i&#x3D;0,n) C(n, i),  ？(不会推导)</p></li></ol><h2 id="3-3-4"><a href="#3-3-4" class="headerlink" title="3.3.4"></a>3.3.4</h2><p>把关键字单个字符大小写用并运算，然后用括号包裹再拼接。如下</p><p>(S|s)(E|e)(L|l)(E|e)(C|c)(T|t)</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CPTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>课程作业1：三种优化比较</title>
    <link href="/GandalfBlog/2024/03/01/work1/"/>
    <url>/GandalfBlog/2024/03/01/work1/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言代码三种优化比较"><a href="#C语言代码三种优化比较" class="headerlink" title="C语言代码三种优化比较"></a>C语言代码三种优化比较</h1><h2 id="一-C语言代码选取"><a href="#一-C语言代码选取" class="headerlink" title="一.C语言代码选取"></a>一.C语言代码选取</h2><p>我选择了一个较为简单的C语言代码，如下所示。</p><p>该代码构建了一个树形结构，并实现了自定义树形结构的前序遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">char</span> element;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> *left, *right;<br>&#125; TreeNode;<br><br><span class="hljs-keyword">typedef</span> TreeNode* Node;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node root)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Node a = (Node)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>    Node b = (Node)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>    Node c = (Node)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>    Node d = (Node)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>    Node e = (Node)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>    Node f = (Node)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>    <br>    <span class="hljs-keyword">if</span>(a == <span class="hljs-literal">NULL</span> || b == <span class="hljs-literal">NULL</span> || c == <span class="hljs-literal">NULL</span> || d == <span class="hljs-literal">NULL</span> || e == <span class="hljs-literal">NULL</span> || f == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// Handle allocation failure</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Memory allocation failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    a-&gt;element = <span class="hljs-string">&#x27;A&#x27;</span>;<br>    b-&gt;element = <span class="hljs-string">&#x27;B&#x27;</span>;<br>    c-&gt;element = <span class="hljs-string">&#x27;C&#x27;</span>;<br>    d-&gt;element = <span class="hljs-string">&#x27;D&#x27;</span>;<br>    e-&gt;element = <span class="hljs-string">&#x27;E&#x27;</span>;<br>    f-&gt;element = <span class="hljs-string">&#x27;F&#x27;</span>;<br><br>    a-&gt;left = b;<br>    a-&gt;right = c;<br>    b-&gt;left = d;<br>    b-&gt;right = e;<br>    c-&gt;right = f;<br>    c-&gt;left = <span class="hljs-literal">NULL</span>;<br>    d-&gt;left = e-&gt;right = <span class="hljs-literal">NULL</span>;<br>    e-&gt;left = e-&gt;right = <span class="hljs-literal">NULL</span>;<br>    f-&gt;left = f-&gt;right = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-built_in">preOrder</span>(a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <span class="hljs-comment">// For newline at the end</span><br><br>    <span class="hljs-comment">// Free allocated memory</span><br>    <span class="hljs-built_in">free</span>(a);<br>    <span class="hljs-built_in">free</span>(b);<br>    <span class="hljs-built_in">free</span>(c);<br>    <span class="hljs-built_in">free</span>(d);<br>    <span class="hljs-built_in">free</span>(e);<br>    <span class="hljs-built_in">free</span>(f);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node root)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;   <span class="hljs-comment">// If reached NULL, then it&#x27;s the end, directly return</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, root-&gt;element);<br>    <span class="hljs-built_in">preOrder</span>(root-&gt;left);<br>    <span class="hljs-built_in">preOrder</span>(root-&gt;right);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后使用gcc指令将这个C代码反汇编成使用三种优化的汇编代码文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//使用O1优化</span><br>gcc -S -O1 example<span class="hljs-selector-class">.c</span> -o example-O1<span class="hljs-selector-class">.s</span><br><span class="hljs-comment">//使用O2优化</span><br>gcc -S -O2 example<span class="hljs-selector-class">.c</span> -o example-O2<span class="hljs-selector-class">.s</span><br><span class="hljs-comment">//使用O3优化</span><br>gcc -S -O3 example<span class="hljs-selector-class">.c</span> -o example-O3.s<br></code></pre></td></tr></table></figure><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-1/test1.png"></p><h2 id="二-GCC编译比较"><a href="#二-GCC编译比较" class="headerlink" title="二.GCC编译比较"></a>二.GCC编译比较</h2><p>生成后的汇编代码如下所示：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">//O1优化</span><br>.<span class="hljs-keyword">file</span><span class="hljs-string">&quot;example.c&quot;</span><br>.<span class="hljs-keyword">text</span><br>.globlpreOrder<br>.typepreOrder, @function<br>preOrder:<br>.LFB21:<br>.cfi_startproc<br>pushq%rbx<br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>.cfi_offset <span class="hljs-number">3</span>, <span class="hljs-number">-16</span><br>movq%rdi, %rbx<br>testq%rdi, %rdi<br>je.L1<br>movsbl(%rdi), %edi<br>callputchar<br>movq<span class="hljs-number">8</span>(%rbx), %rdi<br>callpreOrder<br>movq<span class="hljs-number">16</span>(%rbx), %rdi<br>callpreOrder<br>.L1:<br>popq%rbx<br>.cfi_def_cfa_offset <span class="hljs-number">8</span><br>ret<br>.cfi_endproc<br>.LFE21:<br>.<span class="hljs-keyword">size</span>preOrder, .-preOrder<br>.section.rodata.str1<span class="hljs-number">.1</span>,<span class="hljs-string">&quot;aMS&quot;</span>,@progbits,<span class="hljs-number">1</span><br>.LC0:<br>.<span class="hljs-keyword">string</span><span class="hljs-string">&quot;Memory allocation failed&quot;</span><br>.<span class="hljs-keyword">text</span><br>.globlmain<br>.typemain, @function<br>main:<br>.LFB20:<br>.cfi_startproc<br>pushq%r15<br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>.cfi_offset <span class="hljs-number">15</span>, <span class="hljs-number">-16</span><br>pushq%r14<br>.cfi_def_cfa_offset <span class="hljs-number">24</span><br>.cfi_offset <span class="hljs-number">14</span>, <span class="hljs-number">-24</span><br>pushq%r13<br>.cfi_def_cfa_offset <span class="hljs-number">32</span><br>.cfi_offset <span class="hljs-number">13</span>, <span class="hljs-number">-32</span><br>pushq%r12<br>.cfi_def_cfa_offset <span class="hljs-number">40</span><br>.cfi_offset <span class="hljs-number">12</span>, <span class="hljs-number">-40</span><br>pushq%rbp<br>.cfi_def_cfa_offset <span class="hljs-number">48</span><br>.cfi_offset <span class="hljs-number">6</span>, <span class="hljs-number">-48</span><br>pushq%rbx<br>.cfi_def_cfa_offset <span class="hljs-number">56</span><br>.cfi_offset <span class="hljs-number">3</span>, <span class="hljs-number">-56</span><br>subq$8, %rsp<br>.cfi_def_cfa_offset <span class="hljs-number">64</span><br>movl$24, %edi<br>callmalloc<br>movq%rax, %rbx<br>movl$24, %edi<br>callmalloc<br>movq%rax, %r12<br>movl$24, %edi<br>callmalloc<br>movq%rax, %rbp<br>movl$24, %edi<br>callmalloc<br>movq%rax, %r14<br>movl$24, %edi<br>callmalloc<br>movq%rax, %r13<br>movl$24, %edi<br>callmalloc<br>testq%rbx, %rbx<br>je.L5<br>movq%rax, %r15<br>testq%r12, %r12<br>je.L5<br>testq%rbp, %rbp<br>je.L5<br>testq%r14, %r14<br>je.L5<br>testq%r13, %r13<br>.p2align <span class="hljs-number">4</span>,,<span class="hljs-number">2</span><br>je.L5<br>testq%rax, %rax<br>.p2align <span class="hljs-number">4</span>,,<span class="hljs-number">2</span><br>jne.L6<br>.L5:<br>movl$.LC0, %edi<br>callputs<br>movl$1, %eax<br>jmp.L8<br>.L6:<br>movb$65, (%rbx)<br>movb$66, (%r12)<br>movb$67, <span class="hljs-number">0</span>(%rbp)<br>movb$68, (%r14)<br>movb$69, <span class="hljs-number">0</span>(%r13)<br>movb$70, (%rax)<br>movq%r12, <span class="hljs-number">8</span>(%rbx)<br>movq%rbp, <span class="hljs-number">16</span>(%rbx)<br>movq%r14, <span class="hljs-number">8</span>(%r12)<br>movq%r13, <span class="hljs-number">16</span>(%r12)<br>movq%rax, <span class="hljs-number">16</span>(%rbp)<br>movq$0, <span class="hljs-number">8</span>(%rbp)<br>movq$0, <span class="hljs-number">16</span>(%r13)<br>movq$0, <span class="hljs-number">8</span>(%r14)<br>movq$0, <span class="hljs-number">8</span>(%r13)<br>movq$0, <span class="hljs-number">16</span>(%rax)<br>movq$0, <span class="hljs-number">8</span>(%rax)<br>movq%rbx, %rdi<br>callpreOrder<br>movl$10, %edi<br>callputchar<br>movq%rbx, %rdi<br>callfree<br>movq%r12, %rdi<br>callfree<br>movq%rbp, %rdi<br>callfree<br>movq%r14, %rdi<br>callfree<br>movq%r13, %rdi<br>callfree<br>movq%r15, %rdi<br>callfree<br>movl$0, %eax<br>.L8:<br>addq$8, %rsp<br>.cfi_def_cfa_offset <span class="hljs-number">56</span><br>popq%rbx<br>.cfi_def_cfa_offset <span class="hljs-number">48</span><br>popq%rbp<br>.cfi_def_cfa_offset <span class="hljs-number">40</span><br>popq%r12<br>.cfi_def_cfa_offset <span class="hljs-number">32</span><br>popq%r13<br>.cfi_def_cfa_offset <span class="hljs-number">24</span><br>popq%r14<br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>popq%r15<br>.cfi_def_cfa_offset <span class="hljs-number">8</span><br>ret<br>.cfi_endproc<br>.LFE20:<br>.<span class="hljs-keyword">size</span>main, .-main<br>.ident<span class="hljs-string">&quot;GCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-44)&quot;</span><br>.section.note.GNU-stack,<span class="hljs-string">&quot;&quot;</span>,@progbits<br><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs llvm">//O<span class="hljs-number">2</span>优化<br>.file<span class="hljs-string">&quot;example.c&quot;</span><br>.text<br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><br>.globlpreOrder<br>.<span class="hljs-keyword">type</span>preOrder<span class="hljs-punctuation">,</span> <span class="hljs-title">@function</span><br>preOrder:<br>.LFB<span class="hljs-number">21</span>:<br>.cfi_startproc<br>testq<span class="hljs-variable">%rdi</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br>pushq<span class="hljs-variable">%rbx</span><br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>.cfi_offset <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-16</span><br>movq<span class="hljs-variable">%rdi</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>je.L<span class="hljs-number">1</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">3</span><br>.L<span class="hljs-number">7</span>:<br>movsbl(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span>preOrder<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>testq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>jne.L<span class="hljs-number">7</span><br>.L<span class="hljs-number">1</span>:<br>popq<span class="hljs-variable">%rbx</span><br>.cfi_def_cfa_offset <span class="hljs-number">8</span><br><span class="hljs-keyword">ret</span><br>.cfi_endproc<br>.LFE<span class="hljs-number">21</span>:<br>.sizepreOrder<span class="hljs-punctuation">,</span> .-preOrder<br>.<span class="hljs-keyword">section</span>.rodata.str<span class="hljs-number">1.1</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aMS&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-title">@progbits</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><br>.LC<span class="hljs-number">0</span>:<br>.string<span class="hljs-string">&quot;Memory allocation failed&quot;</span><br>.<span class="hljs-keyword">section</span>.text.startup<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ax&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-title">@progbits</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><br>.globlmain<br>.<span class="hljs-keyword">type</span>main<span class="hljs-punctuation">,</span> <span class="hljs-title">@function</span><br><span class="hljs-symbol">main:</span><br>.LFB<span class="hljs-number">20</span>:<br>.cfi_startproc<br>pushq<span class="hljs-variable">%r15</span><br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>.cfi_offset <span class="hljs-number">15</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-16</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>pushq<span class="hljs-variable">%r14</span><br>.cfi_def_cfa_offset <span class="hljs-number">24</span><br>.cfi_offset <span class="hljs-number">14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-24</span><br>pushq<span class="hljs-variable">%r13</span><br>.cfi_def_cfa_offset <span class="hljs-number">32</span><br>.cfi_offset <span class="hljs-number">13</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-32</span><br>pushq<span class="hljs-variable">%r12</span><br>.cfi_def_cfa_offset <span class="hljs-number">40</span><br>.cfi_offset <span class="hljs-number">12</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-40</span><br>pushq<span class="hljs-variable">%rbp</span><br>.cfi_def_cfa_offset <span class="hljs-number">48</span><br>.cfi_offset <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-48</span><br>pushq<span class="hljs-variable">%rbx</span><br>.cfi_def_cfa_offset <span class="hljs-number">56</span><br>.cfi_offset <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-56</span><br>subq$<span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rsp</span><br>.cfi_def_cfa_offset <span class="hljs-number">64</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r12</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbp</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r14</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r13</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>testq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>je.L<span class="hljs-number">12</span><br>testq<span class="hljs-variable">%r12</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r12</span><br>je.L<span class="hljs-number">12</span><br>testq<span class="hljs-variable">%rbp</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbp</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><br>je.L<span class="hljs-number">12</span><br>testq<span class="hljs-variable">%r14</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r14</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><br>je.L<span class="hljs-number">12</span><br>testq<span class="hljs-variable">%r13</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r13</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><br>jne.L<span class="hljs-number">17</span><br>.L<span class="hljs-number">12</span>:<br>movl$.LC<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>puts<br>movl$<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span><br>.L<span class="hljs-number">15</span>:<br>addq$<span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rsp</span><br>.cfi_remember_state<br>.cfi_def_cfa_offset <span class="hljs-number">56</span><br>popq<span class="hljs-variable">%rbx</span><br>.cfi_def_cfa_offset <span class="hljs-number">48</span><br>popq<span class="hljs-variable">%rbp</span><br>.cfi_def_cfa_offset <span class="hljs-number">40</span><br>popq<span class="hljs-variable">%r12</span><br>.cfi_def_cfa_offset <span class="hljs-number">32</span><br>popq<span class="hljs-variable">%r13</span><br>.cfi_def_cfa_offset <span class="hljs-number">24</span><br>popq<span class="hljs-variable">%r14</span><br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>popq<span class="hljs-variable">%r15</span><br>.cfi_def_cfa_offset <span class="hljs-number">8</span><br><span class="hljs-keyword">ret</span><br>.L<span class="hljs-number">17</span>:<br>.cfi_restore_state<br>testq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r15</span><br>je.L<span class="hljs-number">12</span><br>movb$<span class="hljs-number">70</span><span class="hljs-punctuation">,</span> (<span class="hljs-variable">%rax</span>)<br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%rbp</span>)<br>movq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%rax</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%rax</span>)<br>movb$<span class="hljs-number">67</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span>(<span class="hljs-variable">%rbp</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%rbp</span>)<br>movb$<span class="hljs-number">65</span><span class="hljs-punctuation">,</span> (<span class="hljs-variable">%rbx</span>)<br>movb$<span class="hljs-number">66</span><span class="hljs-punctuation">,</span> (<span class="hljs-variable">%r12</span>)<br>movb$<span class="hljs-number">68</span><span class="hljs-punctuation">,</span> (<span class="hljs-variable">%r14</span>)<br>movb$<span class="hljs-number">69</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span>(<span class="hljs-variable">%r13</span>)<br>movq<span class="hljs-variable">%r12</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%rbx</span>)<br>movq<span class="hljs-variable">%rbp</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%rbx</span>)<br>movq<span class="hljs-variable">%r14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%r12</span>)<br>movq<span class="hljs-variable">%r13</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%r12</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%r13</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%r14</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%r13</span>)<br><span class="hljs-keyword">call</span>preOrder<br>movl$<span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%r12</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%rbp</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%r14</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%r13</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%r15</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>xorl<span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span><br>jmp.L<span class="hljs-number">15</span><br>.cfi_endproc<br>.LFE<span class="hljs-number">20</span>:<br>.sizemain<span class="hljs-punctuation">,</span> .-main<br>.ident<span class="hljs-string">&quot;GCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-44)&quot;</span><br>.<span class="hljs-keyword">section</span>.note.GNU-stack<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-title">@progbits</span><br><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><code class="hljs llvm">//O<span class="hljs-number">3</span>优化<br>.file<span class="hljs-string">&quot;example.c&quot;</span><br>.text<br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><br>.globlpreOrder<br>.<span class="hljs-keyword">type</span>preOrder<span class="hljs-punctuation">,</span> <span class="hljs-title">@function</span><br>preOrder:<br>.LFB<span class="hljs-number">21</span>:<br>.cfi_startproc<br>pushq<span class="hljs-variable">%r15</span><br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>.cfi_offset <span class="hljs-number">15</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-16</span><br>pushq<span class="hljs-variable">%r14</span><br>.cfi_def_cfa_offset <span class="hljs-number">24</span><br>.cfi_offset <span class="hljs-number">14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-24</span><br>pushq<span class="hljs-variable">%r13</span><br>.cfi_def_cfa_offset <span class="hljs-number">32</span><br>.cfi_offset <span class="hljs-number">13</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-32</span><br>pushq<span class="hljs-variable">%r12</span><br>.cfi_def_cfa_offset <span class="hljs-number">40</span><br>.cfi_offset <span class="hljs-number">12</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-40</span><br>pushq<span class="hljs-variable">%rbp</span><br>.cfi_def_cfa_offset <span class="hljs-number">48</span><br>.cfi_offset <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-48</span><br>pushq<span class="hljs-variable">%rbx</span><br>.cfi_def_cfa_offset <span class="hljs-number">56</span><br>.cfi_offset <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-56</span><br>subq$<span class="hljs-number">40</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rsp</span><br>.cfi_def_cfa_offset <span class="hljs-number">96</span><br>testq<span class="hljs-variable">%rdi</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br>movq<span class="hljs-variable">%rdi</span><span class="hljs-punctuation">,</span> <span class="hljs-number">24</span>(<span class="hljs-variable">%rsp</span>)<br>je.L<span class="hljs-number">1</span><br>.L<span class="hljs-number">55</span>:<br>movq<span class="hljs-number">24</span>(<span class="hljs-variable">%rsp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>movsbl(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>testq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%rsp</span>)<br>je.L<span class="hljs-number">7</span><br>.L<span class="hljs-number">56</span>:<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%rsp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>movsbl(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>testq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%rsp</span>)<br>je.L<span class="hljs-number">10</span><br>.L<span class="hljs-number">57</span>:<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%rsp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>movsbl(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%r13</span><br>testq<span class="hljs-variable">%r13</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r13</span><br>je.L<span class="hljs-number">13</span><br>.L<span class="hljs-number">58</span>:<br>movsbl<span class="hljs-number">0</span>(<span class="hljs-variable">%r13</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%r13</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%r14</span><br>testq<span class="hljs-variable">%r14</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r14</span><br>je.L<span class="hljs-number">16</span><br>.L<span class="hljs-number">59</span>:<br>movsbl(<span class="hljs-variable">%r14</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%r14</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%r15</span><br>testq<span class="hljs-variable">%r15</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r15</span><br>je.L<span class="hljs-number">19</span><br>.L<span class="hljs-number">60</span>:<br>movsbl(<span class="hljs-variable">%r15</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%r15</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbp</span><br>testq<span class="hljs-variable">%rbp</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbp</span><br>je.L<span class="hljs-number">22</span><br>.L<span class="hljs-number">61</span>:<br>movsbl<span class="hljs-number">0</span>(<span class="hljs-variable">%rbp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%rbp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>testq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>je.L<span class="hljs-number">25</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">3</span><br>.L<span class="hljs-number">62</span>:<br>movsbl(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%r12</span><br>testq<span class="hljs-variable">%r12</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r12</span><br>je.L<span class="hljs-number">27</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">10</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">3</span><br>.L<span class="hljs-number">63</span>:<br>movsbl(<span class="hljs-variable">%r12</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%r12</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span>preOrder<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%r12</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%r12</span><br>testq<span class="hljs-variable">%r12</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r12</span><br>jne.L<span class="hljs-number">63</span><br>.L<span class="hljs-number">27</span>:<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%rbx</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>testq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>jne.L<span class="hljs-number">62</span><br>.L<span class="hljs-number">25</span>:<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%rbp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbp</span><br>testq<span class="hljs-variable">%rbp</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbp</span><br>jne.L<span class="hljs-number">61</span><br>.L<span class="hljs-number">22</span>:<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%r15</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%r15</span><br>testq<span class="hljs-variable">%r15</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r15</span><br>jne.L<span class="hljs-number">60</span><br>.L<span class="hljs-number">19</span>:<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%r14</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%r14</span><br>testq<span class="hljs-variable">%r14</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r14</span><br>jne.L<span class="hljs-number">59</span><br>.L<span class="hljs-number">16</span>:<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%r13</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%r13</span><br>testq<span class="hljs-variable">%r13</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r13</span><br>jne.L<span class="hljs-number">58</span><br>.L<span class="hljs-number">13</span>:<br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%rsp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%rax</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>testq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%rsp</span>)<br>jne.L<span class="hljs-number">57</span><br>.L<span class="hljs-number">10</span>:<br>movq<span class="hljs-number">8</span>(<span class="hljs-variable">%rsp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%rax</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>testq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%rsp</span>)<br>jne.L<span class="hljs-number">56</span><br>.L<span class="hljs-number">7</span>:<br>movq<span class="hljs-number">24</span>(<span class="hljs-variable">%rsp</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-number">16</span>(<span class="hljs-variable">%rax</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>testq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">24</span>(<span class="hljs-variable">%rsp</span>)<br>jne.L<span class="hljs-number">55</span><br>.L<span class="hljs-number">1</span>:<br>addq$<span class="hljs-number">40</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rsp</span><br>.cfi_def_cfa_offset <span class="hljs-number">56</span><br>popq<span class="hljs-variable">%rbx</span><br>.cfi_def_cfa_offset <span class="hljs-number">48</span><br>popq<span class="hljs-variable">%rbp</span><br>.cfi_def_cfa_offset <span class="hljs-number">40</span><br>popq<span class="hljs-variable">%r12</span><br>.cfi_def_cfa_offset <span class="hljs-number">32</span><br>popq<span class="hljs-variable">%r13</span><br>.cfi_def_cfa_offset <span class="hljs-number">24</span><br>popq<span class="hljs-variable">%r14</span><br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>popq<span class="hljs-variable">%r15</span><br>.cfi_def_cfa_offset <span class="hljs-number">8</span><br><span class="hljs-keyword">ret</span><br>.cfi_endproc<br>.LFE<span class="hljs-number">21</span>:<br>.sizepreOrder<span class="hljs-punctuation">,</span> .-preOrder<br>.<span class="hljs-keyword">section</span>.rodata.str<span class="hljs-number">1.1</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;aMS&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-title">@progbits</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span><br>.LC<span class="hljs-number">0</span>:<br>.string<span class="hljs-string">&quot;Memory allocation failed&quot;</span><br>.<span class="hljs-keyword">section</span>.text.startup<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ax&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-title">@progbits</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">15</span><br>.globlmain<br>.<span class="hljs-keyword">type</span>main<span class="hljs-punctuation">,</span> <span class="hljs-title">@function</span><br><span class="hljs-symbol">main:</span><br>.LFB<span class="hljs-number">20</span>:<br>.cfi_startproc<br>pushq<span class="hljs-variable">%r15</span><br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>.cfi_offset <span class="hljs-number">15</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-16</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>pushq<span class="hljs-variable">%r14</span><br>.cfi_def_cfa_offset <span class="hljs-number">24</span><br>.cfi_offset <span class="hljs-number">14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-24</span><br>pushq<span class="hljs-variable">%r13</span><br>.cfi_def_cfa_offset <span class="hljs-number">32</span><br>.cfi_offset <span class="hljs-number">13</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-32</span><br>pushq<span class="hljs-variable">%r12</span><br>.cfi_def_cfa_offset <span class="hljs-number">40</span><br>.cfi_offset <span class="hljs-number">12</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-40</span><br>pushq<span class="hljs-variable">%rbp</span><br>.cfi_def_cfa_offset <span class="hljs-number">48</span><br>.cfi_offset <span class="hljs-number">6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-48</span><br>pushq<span class="hljs-variable">%rbx</span><br>.cfi_def_cfa_offset <span class="hljs-number">56</span><br>.cfi_offset <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-56</span><br>subq$<span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rsp</span><br>.cfi_def_cfa_offset <span class="hljs-number">64</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r12</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbp</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r14</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>movl$<span class="hljs-number">24</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r13</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">malloc</span><br>testq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbx</span><br>je.L<span class="hljs-number">76</span><br>testq<span class="hljs-variable">%r12</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r12</span><br>je.L<span class="hljs-number">76</span><br>testq<span class="hljs-variable">%rbp</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rbp</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><br>je.L<span class="hljs-number">76</span><br>testq<span class="hljs-variable">%r14</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r14</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><br>je.L<span class="hljs-number">76</span><br>testq<span class="hljs-variable">%r13</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r13</span><br>.p<span class="hljs-number">2</span><span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><br>jne.L<span class="hljs-number">81</span><br>.L<span class="hljs-number">76</span>:<br>movl$.LC<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>puts<br>movl$<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span><br>.L<span class="hljs-number">79</span>:<br>addq$<span class="hljs-number">8</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rsp</span><br>.cfi_remember_state<br>.cfi_def_cfa_offset <span class="hljs-number">56</span><br>popq<span class="hljs-variable">%rbx</span><br>.cfi_def_cfa_offset <span class="hljs-number">48</span><br>popq<span class="hljs-variable">%rbp</span><br>.cfi_def_cfa_offset <span class="hljs-number">40</span><br>popq<span class="hljs-variable">%r12</span><br>.cfi_def_cfa_offset <span class="hljs-number">32</span><br>popq<span class="hljs-variable">%r13</span><br>.cfi_def_cfa_offset <span class="hljs-number">24</span><br>popq<span class="hljs-variable">%r14</span><br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br>popq<span class="hljs-variable">%r15</span><br>.cfi_def_cfa_offset <span class="hljs-number">8</span><br><span class="hljs-keyword">ret</span><br>.L<span class="hljs-number">81</span>:<br>.cfi_restore_state<br>testq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rax</span><br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%r15</span><br>je.L<span class="hljs-number">76</span><br>movb$<span class="hljs-number">70</span><span class="hljs-punctuation">,</span> (<span class="hljs-variable">%rax</span>)<br>movq<span class="hljs-variable">%rax</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%rbp</span>)<br>movq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%rax</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%rax</span>)<br>movb$<span class="hljs-number">67</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span>(<span class="hljs-variable">%rbp</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%rbp</span>)<br>movb$<span class="hljs-number">65</span><span class="hljs-punctuation">,</span> (<span class="hljs-variable">%rbx</span>)<br>movb$<span class="hljs-number">66</span><span class="hljs-punctuation">,</span> (<span class="hljs-variable">%r12</span>)<br>movb$<span class="hljs-number">68</span><span class="hljs-punctuation">,</span> (<span class="hljs-variable">%r14</span>)<br>movb$<span class="hljs-number">69</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span>(<span class="hljs-variable">%r13</span>)<br>movq<span class="hljs-variable">%r12</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%rbx</span>)<br>movq<span class="hljs-variable">%rbp</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%rbx</span>)<br>movq<span class="hljs-variable">%r14</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%r12</span>)<br>movq<span class="hljs-variable">%r13</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%r12</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">16</span>(<span class="hljs-variable">%r13</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%r14</span>)<br>movq$<span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">8</span>(<span class="hljs-variable">%r13</span>)<br><span class="hljs-keyword">call</span>preOrder<br>movl$<span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%edi</span><br><span class="hljs-keyword">call</span>putchar<br>movq<span class="hljs-variable">%rbx</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%r12</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%rbp</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%r14</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%r13</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>movq<span class="hljs-variable">%r15</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br><span class="hljs-keyword">call</span><span class="hljs-keyword">free</span><br>xorl<span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%eax</span><br>jmp.L<span class="hljs-number">79</span><br>.cfi_endproc<br>.LFE<span class="hljs-number">20</span>:<br>.sizemain<span class="hljs-punctuation">,</span> .-main<br>.ident<span class="hljs-string">&quot;GCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-44)&quot;</span><br>.<span class="hljs-keyword">section</span>.note.GNU-stack<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-title">@progbits</span><br><br></code></pre></td></tr></table></figure><p>不难看出，O1到O2再到O3，代码行数逐渐增加，整体代码风格也越来越接近于汇编程序。</p><p>从指令数量来看：O1包含较多的指令，如多次 <code>pushq</code> 和 <code>popq</code>，以及显式的栈操作；O2则有所减少指令数量，去掉了部分显式栈操作，同时还进行了控制流简化，减少了条件跳转的数量；O3则进一步减少指令数量，更趋向于汇编风格，引入了更多的寄存器操作，控制流更加紧凑，减少了冗余指令。</p><p>三种优化都继续使用传统的递归调用来遍历树结构，但O2和O3都通过更高效的寄存器管理和控制流优化减少了指令数量。</p><p>还可以看出，随着优化程度的增加，使用汇编代码变多，其文件大小也逐渐增大，其原因是因为使用多个汇编指令来代替之前单个的C语言指令。</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-1/test2.png"></p><h2 id="三-Clang-LLVM比较"><a href="#三-Clang-LLVM比较" class="headerlink" title="三. Clang-LLVM比较"></a>三. Clang-LLVM比较</h2><p>通过安装Clang-llvm编译器，我在windows上通过下面的代码实现了输出LLVM IR文本</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-1/test3.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//O1</span><br>clang -emit-llvm -O1 -S example<span class="hljs-selector-class">.c</span> -o example_llvm_O1<span class="hljs-selector-class">.ll</span><br><span class="hljs-comment">//O2</span><br>clang -emit-llvm -O2 -S example<span class="hljs-selector-class">.c</span> -o example_llvm_O2<span class="hljs-selector-class">.ll</span><br><span class="hljs-comment">//O3</span><br>clang -emit-llvm -O3 -S example<span class="hljs-selector-class">.c</span> -o example_llvm_O3.ll<br></code></pre></td></tr></table></figure><p>生成出来的结果O1和O2在前面有些许分别，但是O2和O3几乎毫无差别</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-1/test4.png" alt="Image 7" style="width: 100%;">    <span>O1优化</span></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/compileS-1/test5.png" alt="Image 8" style="width: 100%;">        <span>O2优化</span></div></div><p>O2和O3的空间大小，代码函数都完全一样，完全看不出有什么区别，因此我使用了大模型来帮我分析，下文中有。</p><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h2><p>在gcc生成的汇编代码可以看出：O1提供了最基本的优化，适合调试和开发阶段，指令数量较多且控制流复杂，不适合高性能需求；O2则在性能和代码大小之间取得了较好的平衡，指令数量减少，寄存器使用增加，控制流简化，是大多数应用场景的理想选择；而O3是最高的优化级别，适用于需要极致性能的应用，指令数量最少，寄存器使用最多，控制流最紧凑，虽然可能会牺牲一些可读性和二进制大小，但对于性能敏感的应用非常有效，但是空间占用也随之提高。</p><p>而在Clang-llvm生成的LLVM IR文本中，可能因为我选用的C语言代码太过简单，LLVM IR的三种优化的区别不大，因为基本不存在冗余函数或者内联，循环的优化。 :(</p><h2 id="五-大模型使用-附"><a href="#五-大模型使用-附" class="headerlink" title="五. 大模型使用(附)"></a>五. 大模型使用(附)</h2><p>由于Clang-LLVM我实在看不出来差别，使用了大模型进行询问</p><p>大模型： 通义千问</p><p><a href="https://tongyi.aliyun.com/">https://tongyi.aliyun.com/</a></p><h3 id="生成结果："><a href="#生成结果：" class="headerlink" title="生成结果："></a>生成结果：</h3><p>要分析不同优化级别（如<code>-O1</code>, <code>-O2</code>, <code>-O3</code>）在LLVM IR层面的优化效果，我们需要关注几个关键点：代码简化、指令重排、内联函数、循环优化等。由于你只提供了一段IR代码，我们可以基于这段代码进行一些初步分析，并指出在更高优化级别下可能出现的变化。</p><h4 id="分析基础"><a href="#分析基础" class="headerlink" title="分析基础"></a>分析基础</h4><p>首先，我们来看看你提供的LLVM IR代码片段中的一些关键部分：</p><ol><li><strong>内存分配和释放</strong>：<ul><li>使用了多次<code>malloc</code>来分配内存。</li><li>在最后使用了<code>free</code>来释放这些内存。</li></ul></li><li><strong>条件检查与控制流</strong>：<ul><li>通过一系列的<code>icmp eq</code>（整数比较等于）和逻辑运算符（如<code>or</code>），对分配的指针进行了有效性检查。</li><li>如果任何指针为<code>null</code>或内存分配失败，则跳转到错误处理路径。</li></ul></li><li><strong>数据存储操作</strong>：<ul><li>多次使用<code>store</code>指令将值存入分配的内存位置。</li><li>使用<code>getelementptr</code>计算结构体成员的地址并进行相应的存储操作。</li></ul></li><li><strong>递归调用</strong>：<ul><li>函数<code>preOrder</code>被递归调用来遍历树节点。</li></ul></li></ol><h4 id="不同优化级别的预期变化"><a href="#不同优化级别的预期变化" class="headerlink" title="不同优化级别的预期变化"></a>不同优化级别的预期变化</h4><h4 id="O1"><a href="#O1" class="headerlink" title="-O1"></a><code>-O1</code></h4><ul><li><strong>基本优化</strong>：包括简单的死码消除、常量传播等。</li><li><strong>可能的变化</strong>：在这个例子中，可能会看到一些简单的优化，比如合并连续的<code>store</code>指令或者删除未使用的变量。但是，整体结构不会有太大改变。</li></ul><h4 id="O2"><a href="#O2" class="headerlink" title="-O2"></a><code>-O2</code></h4><ul><li><p><strong>更积极的优化</strong>：包括更多的循环优化、函数内联等。</p></li><li><p>可能的变化</p><p>：</p><ul><li><strong>内联函数</strong>：如果<code>preOrder</code>函数足够小且频繁调用，可能会被内联。</li><li><strong>循环优化</strong>：对于递归调用的优化，可能会尝试展开某些循环以减少函数调用开销。</li><li><strong>冗余代码消除</strong>：进一步消除不必要的<code>store</code>&#x2F;<code>load</code>对，以及简化条件分支。</li></ul></li></ul><h4 id="O3"><a href="#O3" class="headerlink" title="-O3"></a><code>-O3</code></h4><ul><li><p><strong>最激进的优化</strong>：包括所有<code>-O2</code>的优化，加上更多高级优化，如更多的内联、循环变换等。</p></li><li><p>可能的变化</p><p>：</p><ul><li><strong>更多内联</strong>：即使是较大的函数也可能会被内联，以减少函数调用的开销。</li><li><strong>高级循环优化</strong>：如循环展开、矢量化等。</li><li><strong>推测执行</strong>：根据程序行为预测性地执行某些代码路径以提高性能。</li><li><strong>寄存器分配改进</strong>：更高效的寄存器使用策略。</li></ul></li></ul><h4 id="具体分析你的代码"><a href="#具体分析你的代码" class="headerlink" title="具体分析你的代码"></a>具体分析你的代码</h4><p>基于你提供的IR代码，以下是一些具体可以期待的变化：</p><ul><li><strong>内存分配检查</strong>：在较高优化级别下，编译器可能会试图减少对<code>malloc</code>返回值的重复检查，或者完全移除那些总是成功的检查（假设内存分配不会失败）。</li><li><strong>递归调用优化</strong>：<code>preOrder</code>函数的递归调用在高优化级别下可能会被转换成迭代形式，或者通过内联消除递归调用的开销。</li><li><strong>常量传播和死码消除</strong>：例如，字符串常量<code>&quot;Memory allocation failed&quot;</code>可能直接嵌入到输出语句中，而不是作为单独的全局变量存在。</li></ul><h4 id="实际对比"><a href="#实际对比" class="headerlink" title="实际对比"></a>实际对比</h4><p>为了真正理解每个优化级别带来的变化，你需要分别使用<code>-O1</code>, <code>-O2</code>, <code>-O3</code>编译你的源代码，并仔细对比生成的<code>.ll</code>文件。特别注意以下几点：</p><ul><li><strong>函数大小和数量</strong>：是否有一些小函数被内联？</li><li><strong>控制流图（CFG）</strong>：是否有新的控制流结构出现，旧的结构是否简化？</li><li><strong>指令数量和类型</strong>：是否存在较少的<code>store</code>&#x2F;<code>load</code>对？是否有新的SIMD指令用于加速特定操作？</li></ul><p>通过这种方式，你可以获得关于不同优化级别如何影响最终生成的LLVM IR的具体见解。如果你能提供各个优化级别下的<code>.ll</code>文件，我可以帮助更详细地分析它们之间的差异。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CPTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三次作业：物理渲染器</title>
    <link href="/GandalfBlog/2024/02/10/%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <url>/GandalfBlog/2024/02/10/%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h3><p>这次作业我实现了生成光线和场景求交，对着色进行加速，实现直接光照和全局光照。其中使用了BVH，BSDF，BRDF，重要性采样，RR全局照明等算法。</p><h3 id="二-光线生成与场景求交"><a href="#二-光线生成与场景求交" class="headerlink" title="二.光线生成与场景求交"></a>二.光线生成与场景求交</h3><p>基本流程如下：</p><p>1<strong>从相机发射光线</strong>：</p><ul><li>对于每个像素，计算一条从相机（视点）通过像素中心射向场景的光线。</li></ul><p>2<strong>与场景物体求交</strong>：</p><ul><li>对于每条光线，检测它是否与场景中的物体相交。通常，物体被表示为几何图元（如三角形、球体等）。</li></ul><p>3 <strong>计算交点和法向量</strong>：</p><ul><li>如果光线与物体相交，确定交点和交点处的法向量。</li><li>如果有多个交点，则选择距离相机最近的交点作为有效相交点。</li></ul><p>4 <strong>计算光照（Shading）</strong>：</p><ul><li>根据交点的材质（如漫反射、镜面反射等）和光源位置，计算交点处的光照。</li><li>通过递归方式追踪反射光线（镜面反射）、折射光线（透明材质）以及阴影光线（检查光线能否直接到达光源）。</li></ul><p>5 <strong>返回颜色值</strong>：</p><ul><li>将计算得到的颜色值返回给当前像素，并显示在屏幕上。</li></ul><div style="display: flex; flex-wrap: wrap; justify-content: center; align-items: center;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">        <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/1.png" alt="Image 1" style="width: 100%;">    </div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">        <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/2.png" alt="Image 2" style="width: 100%;">    </div>    <div style="width: 100%; text-align: center; margin-top: 10px;">        <span>实现1.2生成像素样本之后，可以将数据映射到颜色上</span>    </div></div><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/3.png" alt="Image 3" style="width: 100%;">        <span>实现1.3后可以实现空房间的着色</span></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/4.png" alt="Image 4" style="width: 100%;">        <span>实现1.4后可以实现球体求交渲染</span></div></div><h3 id="三-空间加速数据结构（以BVH为例）"><a href="#三-空间加速数据结构（以BVH为例）" class="headerlink" title="三.空间加速数据结构（以BVH为例）"></a>三.空间加速数据结构（以BVH为例）</h3><p>BVH构造过程如下：</p><p>1 <strong>初始化节点</strong>：</p><ul><li>计算所有图元的包围盒（BBox）。</li><li>构建场景的整体包围盒作为根节点。</li></ul><p>2 <strong>递归划分节点</strong>：</p><ul><li>如果当前节点包含的图元数量小于2，则将该节点标记为叶节点，停止划分。</li><li>否则，继续划分当前节点。</li></ul><p>3 <strong>选择分割轴和分割位置</strong>：</p><ul><li>根据中位数划分策略选择一个轴（x、y 或 z 轴）进行划分。</li><li>根据所选的分割位置，将图元分为左右两组，创建左子节点和右子节点。</li></ul><p>4 <strong>构建子节点</strong>：</p><ul><li>为每一组图元递归地创建左、右子节点，继续执行上述过程，直到所有节点都满足叶节点的条件。</li></ul><p>5 <strong>返回节点结构</strong>：</p><ul><li>构建完成后，返回 BVH 树的根节点，用于后续的光线投射加速。</li></ul><p>节点二分时我选择的是中位数划分策略：选取中位数作为划分点，按照坐标轴将包围盒分为两半，然后对新的两个包围盒依次递归，直到满足叶节点条件。</p><p>下面是我选择的几个较大三角网格模型求交结果：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/5.png" alt="Image 5" style="width: 100%;"></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/6.png" alt="Image 6" style="width: 100%;"></div></div><p>这些网格包含数万个三角形，但是都可以在秒级内渲染出结果</p><h3 id="四-直接光照"><a href="#四-直接光照" class="headerlink" title="四.直接光照"></a>四.直接光照</h3><p>在路径追踪（Path Tracing）等算法中，直接光照可以通过不同的采样策略进行计算，主要包括：</p><ol><li><strong>均匀采样（Uniform Sampling）</strong>：</li></ol><p>o  在整个半球上均匀采样入射光方向。</p><p>o  计算从每个采样方向入射的光线，并求出平均值。</p><ol start="2"><li><strong>重要性采样（Importance Sampling）</strong>：</li></ol><p>o  根据光源的方向性和亮度分布，优先采样对直接光照贡献较大的方向。</p><p>o  可以减少噪声，提高光照计算的效率和精度。</p><p>实现零反射光照后可以生成下图：</p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/7.png" alt="Image 7" style="width: 49%;"><p>实现均匀采样可以实现下列效果：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/8.png" alt="Image 8" style="width: 100%;"></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/9.png" alt="Image 9" style="width: 100%;"></div></div><p>右图比左图采样率高，但是仍然可以看出有很强的噪声。</p><p>而实现重要性采样实现下图效果：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/10.png" alt="Image 10" style="width: 100%;"></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/12.png" alt="Image 11" style="width: 100%;"></div></div><p>可以看出重要性采样比平均采样队消除噪声的效果更强，生成的图像更平滑。</p><h3 id="五-全局光照"><a href="#五-全局光照" class="headerlink" title="五.全局光照"></a>五.全局光照</h3><p>全局光照综合了前面的多种算法，增加了递归算法和RR（俄罗斯轮盘赌）来使光照不仅有直接照明，也有间接照明。模拟实现物体表面的光的散射。</p><p>下图是兔子图的全局光照图像，使用了低采样和高采样。</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/13.png" alt="Image 12" style="width: 100%;"></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/3-photo/14.png" alt="Image 13" style="width: 100%;"></div></div><h3 id="六-实践与思考"><a href="#六-实践与思考" class="headerlink" title="六.实践与思考"></a>六.实践与思考</h3><p>在实现全局光照算法和路径追踪时，我遇到了一些挑战，主要是噪声和性能瓶颈。通过增加采样数量来减少噪声，但这也显著增加了计算时间。优化过程中，我使用了BVH加速结构来提高光线相交效率，并采用了重要性采样来减少无效采样，从而提高了渲染速度。此外，我还通过多线程并行化路径追踪，进一步缩短了渲染时间。</p><p>然而，噪声问题仍然存在，尤其是在复杂场景中。为了改进，我计划采用自适应采样和优化内存管理，减少不必要的资源分配，进一步提升性能。总体来说，经过优化后，渲染速度加快，图像质量提高，但仍需在计算效率和渲染效果之间做出权衡。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次作业：光栅化三角形</title>
    <link href="/GandalfBlog/2024/02/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <url>/GandalfBlog/2024/02/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="一-前置函数实现"><a href="#一-前置函数实现" class="headerlink" title="一.前置函数实现"></a>一.前置函数实现</h2><p>实现一个函数，来判断点是否在一个三角形的内部.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">insideTriangle</span><span class="hljs-params">(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y, <span class="hljs-type">const</span> Vector3f* _v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    Vector3f point0 = _v[<span class="hljs-number">0</span>];<br>    Vector3f point1 = _v[<span class="hljs-number">1</span>];<br>    Vector3f point2 = _v[<span class="hljs-number">2</span>];<br><br>    <br>    Vector3f vector0 = <span class="hljs-built_in">Vector3f</span>(x - point<span class="hljs-number">0.</span><span class="hljs-built_in">x</span>(), y - point<span class="hljs-number">0.</span><span class="hljs-built_in">y</span>(), <span class="hljs-number">0</span>);<br>    Vector3f vector1 = <span class="hljs-built_in">Vector3f</span>(x - point<span class="hljs-number">1.</span><span class="hljs-built_in">x</span>(), y - point<span class="hljs-number">1.</span><span class="hljs-built_in">y</span>(), <span class="hljs-number">0</span>);<br>    Vector3f vector2 = <span class="hljs-built_in">Vector3f</span>(x - point<span class="hljs-number">2.</span><span class="hljs-built_in">x</span>(), y - point<span class="hljs-number">2.</span><span class="hljs-built_in">y</span>(), <span class="hljs-number">0</span>);<br><br>    <br>    Vector3f edge0 = point1 - point0;<br>    Vector3f edge1 = point2 - point1;<br>    Vector3f edge2 = point0 - point2;<br>    <br>    <span class="hljs-keyword">auto</span> cross0 = edge<span class="hljs-number">0.</span><span class="hljs-built_in">cross</span>(vector0);<br>    <span class="hljs-keyword">auto</span> cross1 = edge<span class="hljs-number">1.</span><span class="hljs-built_in">cross</span>(vector1);<br>    <span class="hljs-keyword">auto</span> cross2 = edge<span class="hljs-number">2.</span><span class="hljs-built_in">cross</span>(vector2);<br>    <br>    <span class="hljs-keyword">if</span> (cross<span class="hljs-number">0.</span><span class="hljs-built_in">z</span>() &gt; <span class="hljs-number">0</span> &amp;&amp; cross<span class="hljs-number">1.</span><span class="hljs-built_in">z</span>() &gt; <span class="hljs-number">0</span> &amp;&amp; cross<span class="hljs-number">2.</span><span class="hljs-built_in">z</span>() &gt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cross<span class="hljs-number">0.</span><span class="hljs-built_in">z</span>() &lt; <span class="hljs-number">0</span> &amp;&amp; cross<span class="hljs-number">1.</span><span class="hljs-built_in">z</span>() &lt; <span class="hljs-number">0</span> &amp;&amp; cross<span class="hljs-number">2.</span><span class="hljs-built_in">z</span>() &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码通过叉乘来计算出点是否在三角形的内部，主要通过三个叉乘结果的Z值正负是否相同来判断</p><h2 id="二-实现三角形光栅化"><a href="#二-实现三角形光栅化" class="headerlink" title="二.实现三角形光栅化"></a>二.实现三角形光栅化</h2><p>接下来我们可以实现光栅化函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">rasterize_triangle</span>(<span class="hljs-type">const</span> Triangle&amp; t) &#123;<br>    <span class="hljs-keyword">auto</span> v = t.<span class="hljs-built_in">toVector4</span>();<br>    <br>    <br>    <span class="hljs-type">float</span> minX, minY, maxX, maxY;<br>    minX = std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">x</span>(), std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">x</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">x</span>()));<br>    maxX = std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">x</span>(), std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">x</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">x</span>()));<br>    minY = std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">y</span>(), std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">y</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">y</span>()));<br>    maxY = std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">y</span>(), std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">y</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">y</span>()));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = std::<span class="hljs-built_in">floor</span>(minX); x &lt;= std::<span class="hljs-built_in">ceil</span>(maxX); x++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = std::<span class="hljs-built_in">floor</span>(minY); y &lt;= std::<span class="hljs-built_in">ceil</span>(maxY); y++) &#123;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">insideTriangle</span>(x + <span class="hljs-number">0.5</span>, y + <span class="hljs-number">0.5</span>, t.v)) &#123;<br>                <span class="hljs-type">float</span> alpha, beta, gamma;<br>                std::<span class="hljs-built_in">tie</span>(alpha, beta, gamma) = <span class="hljs-built_in">computeBarycentric2D</span>(x, y, t.v);<br>                <span class="hljs-type">float</span> w_reciprocal = <span class="hljs-number">1.0</span>/(alpha / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>());<br>                <span class="hljs-type">float</span> z_interpolated = alpha * v[<span class="hljs-number">0</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta * v[<span class="hljs-number">1</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma * v[<span class="hljs-number">2</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>();<br>                z_interpolated *= w_reciprocal;<br><br>                <span class="hljs-type">int</span> index = <span class="hljs-built_in">get_index</span>(x, y);<br>                <span class="hljs-keyword">if</span> (z_interpolated &lt; depth_buf[index]) &#123;<br>                    depth_buf[index] = z_interpolated;<br>                    <span class="hljs-keyword">auto</span> color = t.<span class="hljs-built_in">getColor</span>();<br>                    <span class="hljs-built_in">set_pixel</span>(Eigen::<span class="hljs-built_in">Vector3f</span>(x, y, z_interpolated), color);<br>                &#125;<br>            &#125;<br>            <br>            <br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码的实现结果如下，可以看到图像边沿有明显的锯齿感</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/photo/1.png"></p><p>这是因为我们的采样不够细，可以进一步采用超采样来实现</p><h2 id="三-实现超采样光栅化"><a href="#三-实现超采样光栅化" class="headerlink" title="三.实现超采样光栅化"></a>三.实现超采样光栅化</h2><p>现在实现了一个超采样的光栅化函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">super_rasterize_triangle</span>(<span class="hljs-type">const</span> Triangle&amp; t) &#123;<br>    <span class="hljs-keyword">auto</span> v = t.<span class="hljs-built_in">toVector4</span>();<br>    <br>    <br>    <span class="hljs-type">float</span> minX, minY, maxX, maxY;<br>    minX = std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">x</span>(), std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">x</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">x</span>()));<br>    maxX = std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">x</span>(), std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">x</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">x</span>()));<br>    minY = std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">y</span>(), std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">y</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">y</span>()));<br>    maxY = std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">y</span>(), std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">y</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">y</span>()));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = std::<span class="hljs-built_in">floor</span>(minX); x &lt;= std::<span class="hljs-built_in">ceil</span>(maxX); x++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = std::<span class="hljs-built_in">floor</span>(minY); y &lt;= std::<span class="hljs-built_in">ceil</span>(maxY); y++) &#123;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> offset = <span class="hljs-number">0</span>; offset &lt; <span class="hljs-number">4</span>; offset++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">insideTriangle</span>(x + superOffsetX[offset], y + superOffsetY[offset],t.v))&#123;<br>                    <span class="hljs-type">float</span> alpha, beta, gamma;<br>                    std::<span class="hljs-built_in">tie</span>(alpha, beta, gamma) = <span class="hljs-built_in">computeBarycentric2D</span>(x + superOffsetX[offset], y + superOffsetY[offset], t.v);<br>                    <span class="hljs-type">float</span> w_reciprocal = <span class="hljs-number">1.0</span> / (alpha / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>());<br>                    <span class="hljs-type">float</span> z_interpolated = alpha * v[<span class="hljs-number">0</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta * v[<span class="hljs-number">1</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma * v[<span class="hljs-number">2</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>();<br>                    z_interpolated *= w_reciprocal;<br>                <br>                    <span class="hljs-keyword">if</span> (z_interpolated &lt; super_depth_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + offset % <span class="hljs-number">2</span>,y * <span class="hljs-number">2</span> + offset / <span class="hljs-number">2</span>)]) &#123;<br>                        cnt ++ ;<br>                        super_depth_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + offset % <span class="hljs-number">2</span>,y * <span class="hljs-number">2</span> + offset / <span class="hljs-number">2</span>)] = z_interpolated;<br>                        sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + offset % <span class="hljs-number">2</span>,y * <span class="hljs-number">2</span> + offset / <span class="hljs-number">2</span>)] = t.<span class="hljs-built_in">getColor</span>();<br>                    &#125;<br>                &#125;<br>            <br>            &#125;<br>            <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">0</span>)&#123;<br>                Vector3f point = &#123;(<span class="hljs-type">float</span>)x, (<span class="hljs-type">float</span>)y, <span class="hljs-number">0</span>&#125;;<br>                Vector3f color = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>                color += sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span>, y * <span class="hljs-number">2</span>)];<br>                color += sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, y * <span class="hljs-number">2</span>)];<br>                color += sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span>, y * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)];<br>                color += sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, y * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)];<br>                color /= <span class="hljs-number">4.0f</span>;<br>                <span class="hljs-built_in">set_pixel</span>(point, color);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数把原来的一个单元网格进一步细分，分为四个网格来进行渲染，进一步削弱锯齿感</p><p>通过这个函数，我们可以看到基本实现了平滑的三角形。</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/photo/2.png" alt="2"></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二次作业：网格编辑</title>
    <link href="/GandalfBlog/2024/02/03/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <url>/GandalfBlog/2024/02/03/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h2><p>这个作业主要实现了贝塞尔曲线和曲面，并通过加权面积的顶点法线实现了曲面的平滑着色。最后实现边翻转和边分割，并凭借这两个函数实现loop细分，使物体更加平滑。</p><h2 id="二-贝塞尔曲线和曲面"><a href="#二-贝塞尔曲线和曲面" class="headerlink" title="二.贝塞尔曲线和曲面"></a>二.贝塞尔曲线和曲面</h2><h3 id="1-基于-1D-de-Casteljau-绘制贝塞尔曲线"><a href="#1-基于-1D-de-Casteljau-绘制贝塞尔曲线" class="headerlink" title="1. 基于 1D de Casteljau 绘制贝塞尔曲线"></a>1. 基于 1D de Casteljau 绘制贝塞尔曲线</h3><p>de Casteljau 算法是一种用于递归计算贝塞尔曲线上任意点的几何算法。它基于控制点的线性插值，并且与贝塞尔曲线的定义完全一致，适用于任何阶数的贝塞尔曲线。算法的核心思想是：通过在相邻控制点之间进行线性插值，逐步计算中间控制点，直到得到曲线上的一个点。它的主要公式是：<br>$$<br>P_0’(t) &#x3D; (1 - t) P_0 + t P_1<br>$$<br>我实现了以下这个函数：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;Vector2D&gt; BezierCurve::evaluateStep(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;Vector2D&gt; const&amp; <span class="hljs-built_in">points</span>)<br>&#123;<br>    size_t size = <span class="hljs-built_in">points</span>.size();<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;Vector2D&gt; res;<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; size - <span class="hljs-number">1</span>; i++) &#123;<br>        Vector2D temp;<br>        temp.x = (<span class="hljs-number">1</span> - t) * <span class="hljs-built_in">points</span>[i].x + t * <span class="hljs-built_in">points</span>[i + <span class="hljs-number">1</span>].x;<br>        temp.y = (<span class="hljs-number">1</span> - t) * <span class="hljs-built_in">points</span>[i].y + t * <span class="hljs-built_in">points</span>[i + <span class="hljs-number">1</span>].y;<br><br>        res.push_back(temp);<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数通过遍历传入的数组，返回这个数组的下一次迭代结果。</p><p>例如：一个size为n的points，经过n-1次这个函数，最终返回的数组将只有一个值</p><p>以下是按E依次迭代和按C显示完整贝塞尔曲线的截图：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 32%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/1.jpg" alt="Image 1" style="width: 100%;"></div>    <div style="width: 32%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/2.jpg" alt="Image 2" style="width: 100%;"></div>    <div style="width: 32%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/3.jpg" alt="Image 3" style="width: 100%;"></div>    <div style="width: 32%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/4.jpg" alt="Image 4" style="width: 100%;"></div>    <div style="width: 32%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/5.jpg" alt="Image 5" style="width: 100%;"></div></div><h3 id="2-基于1D-de-Cateljau绘制贝塞尔曲面"><a href="#2-基于1D-de-Cateljau绘制贝塞尔曲面" class="headerlink" title="2.基于1D de Cateljau绘制贝塞尔曲面"></a>2.基于1D de Cateljau绘制贝塞尔曲面</h3><p>首先要将贝塞尔曲线迭代转化为贝塞尔曲面迭代，实现以下函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">std::vector&lt;Vector3D&gt; <span class="hljs-title">BezierPatch::evaluateStep</span><span class="hljs-params">(std::vector&lt;Vector3D&gt; <span class="hljs-type">const</span>&amp; points, <span class="hljs-type">double</span> t)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">size_t</span> size = points.<span class="hljs-built_in">size</span>();<br>    std::vector&lt;Vector3D&gt; res;<br>    <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size - <span class="hljs-number">1</span>; i++) &#123;<br>        Vector3D temp;<br>        temp.x = (<span class="hljs-number">1</span> - t) * points[i].x + t * points[i + <span class="hljs-number">1</span>].x;<br>        temp.y = (<span class="hljs-number">1</span> - t) * points[i].y + t * points[i + <span class="hljs-number">1</span>].y;<br>        temp.z = (<span class="hljs-number">1</span> - t) * points[i].z + t * points[i + <span class="hljs-number">1</span>].z;<br><br>        res.<span class="hljs-built_in">push_back</span>(temp);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，这个函数和1部分基本类似，只是将Vertor2D改为Vertor3D。</p><p>接着要实现一次性迭代到一个点的函数，这个函数只需在内部调用前一个evaluateStep函数即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Vector3D <span class="hljs-title">BezierPatch::evaluate1D</span><span class="hljs-params">(std::vector&lt;Vector3D&gt; <span class="hljs-type">const</span> &amp;points, <span class="hljs-type">double</span> t)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;   <br>    std::vector&lt;Vector3D&gt; temp = points;<br>    <span class="hljs-keyword">while</span> (temp.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>        temp = <span class="hljs-built_in">evaluateStep</span>(temp, t);<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp.<span class="hljs-built_in">empty</span>() ? <span class="hljs-built_in">Vector3D</span>() : temp.<span class="hljs-built_in">back</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后要实现贝塞尔曲面的绘制，即在三维空间中先沿u迭代一轮，再把迭代的结果数组沿v迭代一轮，最后返回去贝塞尔曲面的点。这个函数仅需要再内部调用前一个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Vector3D <span class="hljs-title">BezierPatch::evaluate</span><span class="hljs-params">(<span class="hljs-type">double</span> u, <span class="hljs-type">double</span> v)</span> <span class="hljs-type">const</span> </span><br><span class="hljs-function"></span>&#123;  <br>    std::vector&lt;Vector3D&gt; temp;<br>    <span class="hljs-keyword">if</span> (!controlPoints.<span class="hljs-built_in">size</span>())<span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector3D</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; controlPoints.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        temp.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">evaluate1D</span>(controlPoints[i], u));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">evaluate1D</span>(temp, v);<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行这个函数后，我们可以执行控制台命令看到一个茶壶的贝塞尔曲面绘制图像：</p><p> <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/6.png" alt="6"></p><h2 id="三-三角网格和半边数据结构"><a href="#三-三角网格和半边数据结构" class="headerlink" title="三.三角网格和半边数据结构"></a>三.三角网格和半边数据结构</h2><h3 id="3-基于面积加权的顶点法线计算"><a href="#3-基于面积加权的顶点法线计算" class="headerlink" title="3. 基于面积加权的顶点法线计算"></a>3. 基于面积加权的顶点法线计算</h3><p>计算基于面积加权的顶点法线有四个步骤：</p><p>① 计算每个面的法线（可以通过cross函数来实现）</p><p>② 计算每个三角形的面积（通过法线计算）</p><p>③ 将每个面和其对应法线的乘积相加</p><p>④ 最后将相加结果归一化，得到最终结果</p><p>以下是实现的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Vector3D <span class="hljs-title">Vertex::normal</span><span class="hljs-params">( <span class="hljs-type">void</span> )</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    Vector3D res;<br>    HalfedgeCIter h = <span class="hljs-built_in">halfedge</span>();<br><br>    HalfedgeCIter ptr = h;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        Vector3D p0 = h-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>        Vector3D p1 = h-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>        Vector3D p2 = h-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br><br>        Vector3D c = <span class="hljs-built_in">cross</span>(p1 - p0, p2 - p0);<br>        <span class="hljs-comment">//Vector3D c = cross(p0 - p1, p0 - p2);</span><br>        <span class="hljs-comment">//c *= -1;</span><br>        <span class="hljs-type">double</span> area = c.<span class="hljs-built_in">norm</span>() / <span class="hljs-number">2.0</span>;<br>        res += c * area;<br><br>        h = h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">next</span>();<br>    &#125; <span class="hljs-keyword">while</span> (h != ptr);<br><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">unit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>实现这个函数后，可以按Q来对物体进行平滑着色，下面是茶壶平滑着色前后的对比：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/7.jpg" alt="Image 7" style="width: 100%;">    <span>平滑着色前</span></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/8.jpg" alt="Image 8" style="width: 100%;">        <span>平滑着色后</span></div></div><p>我关闭了网格显示来使得平滑着色更明显。</p><h3 id="4-边翻转-Edge-Flip"><a href="#4-边翻转-Edge-Flip" class="headerlink" title="4.边翻转(Edge Flip)"></a>4.边翻转(Edge Flip)</h3><p>边翻转有三个操作步骤：</p><p>① 确定相邻三角形</p><p>② 翻转它们的相邻边</p><p>③ 检查翻转的合法性（设置这两个新三角形的相关属性）</p><p>边翻转没有创造任何新边，只是将原有的边所相关的参数重新设置，在我的函数中，为了保险起见，我重新设置了近乎所有相关的属性，即使其中有些是不必要的，这显得我的代码看的有一些臃肿，但是也保证了程序运行的安全性。以下是我的实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">EdgeIter <span class="hljs-title">HalfedgeMesh::flipEdge</span><span class="hljs-params">( EdgeIter e0 )</span></span><br><span class="hljs-function"></span>&#123;<br>    HalfedgeIter h1 = e0-&gt;<span class="hljs-built_in">halfedge</span>();<br>    HalfedgeIter h2 = h1-&gt;<span class="hljs-built_in">twin</span>();<br><br>    <span class="hljs-keyword">if</span> (h1-&gt;<span class="hljs-built_in">isBoundary</span>() || h2-&gt;<span class="hljs-built_in">isBoundary</span>()) &#123;<br>        <span class="hljs-keyword">return</span> e0;<br>    &#125;<br>    VertexIter v1 = h1-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v2 = h2-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v3 = h1-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v4 = h2-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br>    <br><br>    FaceIter f1 = h1-&gt;<span class="hljs-built_in">face</span>();<br>    FaceIter f2 = h2-&gt;<span class="hljs-built_in">face</span>();<br><br>    HalfedgeIter h1_next = h1-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h2_next = h2-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h1_prev = h1_next-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h2_prev = h2_next-&gt;<span class="hljs-built_in">next</span>();<br><br>    EdgeIter e1 = h1_next-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter e2 = h2_next-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter e3 = h1_prev-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter e4 = h2_prev-&gt;<span class="hljs-built_in">edge</span>();<br><br><br>    h1-&gt;<span class="hljs-built_in">setNeighbors</span>(h1_prev, h2, v4, e0, f1);<br>    h2-&gt;<span class="hljs-built_in">setNeighbors</span>(h2_prev, h1, v3, e0, f2);<br><br>    h1_next-&gt;<span class="hljs-built_in">setNeighbors</span>(h2, h1_next-&gt;<span class="hljs-built_in">twin</span>(), v2, h1_next-&gt;<span class="hljs-built_in">edge</span>(), f2);<br>    h2_next-&gt;<span class="hljs-built_in">setNeighbors</span>(h1, h2_next-&gt;<span class="hljs-built_in">twin</span>(), v1, h2_next-&gt;<span class="hljs-built_in">edge</span>(), f1);<br><br>    h1_prev-&gt;<span class="hljs-built_in">setNeighbors</span>(h2_next, h1_prev-&gt;<span class="hljs-built_in">twin</span>(), v3, h1_prev-&gt;<span class="hljs-built_in">edge</span>(), f1);<br>    h2_prev-&gt;<span class="hljs-built_in">setNeighbors</span>(h1_next, h2_prev-&gt;<span class="hljs-built_in">twin</span>(), v4, h2_prev-&gt;<span class="hljs-built_in">edge</span>(), f2);<br><br><br>    f1-&gt;<span class="hljs-built_in">halfedge</span>() = h1;<br>    f2-&gt;<span class="hljs-built_in">halfedge</span>() = h2;<br><br>    e0-&gt;<span class="hljs-built_in">halfedge</span>() = h1;<br>    e1-&gt;<span class="hljs-built_in">halfedge</span>() = h1_next;<br>    e2-&gt;<span class="hljs-built_in">halfedge</span>() = h2_next;<br>    e3-&gt;<span class="hljs-built_in">halfedge</span>() = h1_prev;<br>    e4-&gt;<span class="hljs-built_in">halfedge</span>() = h2_prev;<br><br>    v1-&gt;<span class="hljs-built_in">halfedge</span>() = h2_next;<br>    v2-&gt;<span class="hljs-built_in">halfedge</span>() = h1_next;<br>    v3-&gt;<span class="hljs-built_in">halfedge</span>() = h1_prev;<br>    v4-&gt;<span class="hljs-built_in">halfedge</span>() = h2_prev;<br><br>    <span class="hljs-keyword">return</span> e0;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这个代码我可以对边进行翻转（非边界边）:</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/9.jpg" alt="Image 9" style="width: 100%;">    <span>翻转边</span></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/10.jpg" alt="Image 10" style="width: 100%;">        <span>多次翻转边</span></div></div><h3 id="5-边分割（Edge-Split）"><a href="#5-边分割（Edge-Split）" class="headerlink" title="5.边分割（Edge Split）"></a>5.边分割（Edge Split）</h3><p>边分割需要一下操作步骤：</p><p>① 确定要分割的边</p><p>② 添加新顶点</p><p>③ 更新网格拓扑，维护拓扑结构</p><p>边分割不同边翻转，它需要创建一个新顶点，因此也会创建三条新边，六条新半边以及两个新面。因此我们需要对很多数据进行维护，我依旧采用像边分割一样的思路，把我认为应该维护的属性全部维护，来保证我分割边逻辑的正确性。由于我操作的图形全部都是封闭图形，因此我没有考虑对边界边进行分割。</p><p>以下是我进行边分割的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">VertexIter <span class="hljs-title">HalfedgeMesh::splitEdge</span><span class="hljs-params">(EdgeIter e)</span> </span>&#123;<br>    HalfedgeIter h1 = e-&gt;<span class="hljs-built_in">halfedge</span>();<br>    HalfedgeIter h2 = h1-&gt;<span class="hljs-built_in">twin</span>();<br><br>    <span class="hljs-keyword">if</span> (h1-&gt;<span class="hljs-built_in">isBoundary</span>() || h2-&gt;<span class="hljs-built_in">isBoundary</span>()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">VertexIter</span>(); <br>    &#125;<br><br>    VertexIter v1 = h1-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v2 = h2-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v3 = h1-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v4 = h2-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br><br>    HalfedgeIter h1_next = h1-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h2_next = h2-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h1_prev = h1_next-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h2_prev = h2_next-&gt;<span class="hljs-built_in">next</span>();<br><br><br>    Vector3D midpoint = (v1-&gt;position + v2-&gt;position) * <span class="hljs-number">0.5</span>;<br>    VertexIter newVertexIter = <span class="hljs-built_in">newVertex</span>();<br>    newVertexIter-&gt;position = midpoint;<br>    newVertexIter-&gt;isNew = <span class="hljs-literal">true</span>;<br><br>    HalfedgeIter newH1 = h1;<br>    HalfedgeIter newH2 = h2;<br>    HalfedgeIter newH3 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH4 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH5 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH6 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH7 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH8 = <span class="hljs-built_in">newHalfedge</span>();<br>    <br>    EdgeIter newE1 = h1-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter newE2 = <span class="hljs-built_in">newEdge</span>();<br>    EdgeIter newE3 = <span class="hljs-built_in">newEdge</span>();<br>    EdgeIter newE4 = <span class="hljs-built_in">newEdge</span>();<br><br>    EdgeIter E1 = h1_next-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter E2 = h2_next-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter E3 = h1_prev-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter E4 = h2_prev-&gt;<span class="hljs-built_in">edge</span>();<br><br><br>    FaceIter newF1 = h1-&gt;<span class="hljs-built_in">face</span>();<br>    FaceIter newF2 = h2-&gt;<span class="hljs-built_in">face</span>();<br>    FaceIter newF3 = <span class="hljs-built_in">newFace</span>();<br>    FaceIter newF4 = <span class="hljs-built_in">newFace</span>();<br><br>    newH1-&gt;<span class="hljs-built_in">setNeighbors</span>(newH5, newH2, v1, newE1, newF1);<br>    newH2-&gt;<span class="hljs-built_in">setNeighbors</span>(h2_next, newH1, newVertexIter, newE1, newF2);<br>    newH3-&gt;<span class="hljs-built_in">setNeighbors</span>(h1_next, newH4, newVertexIter, newE2, newF3);<br>    newH4-&gt;<span class="hljs-built_in">setNeighbors</span>(newH8, newH3, v2, newE2, newF4);<br>    newH5-&gt;<span class="hljs-built_in">setNeighbors</span>(h1_prev, newH6, newVertexIter, newE3, newF1);<br>    newH6-&gt;<span class="hljs-built_in">setNeighbors</span>(newH3, newH5, v3, newE3, newF3);<br>    newH7-&gt;<span class="hljs-built_in">setNeighbors</span>(newH2, newH8, v4, newE4, newF2);<br>    newH8-&gt;<span class="hljs-built_in">setNeighbors</span>(h2_prev, newH7, newVertexIter, newE4, newF4);<br><br>    h1_next-&gt;<span class="hljs-built_in">setNeighbors</span>(newH6, h1_next-&gt;<span class="hljs-built_in">twin</span>(), v2, h1_next-&gt;<span class="hljs-built_in">edge</span>(), newF3);<br>    h2_next-&gt;<span class="hljs-built_in">setNeighbors</span>(newH7, h2_next-&gt;<span class="hljs-built_in">twin</span>(), v1, h2_next-&gt;<span class="hljs-built_in">edge</span>(), newF2);<br>    h1_prev-&gt;<span class="hljs-built_in">setNeighbors</span>(newH1, h1_prev-&gt;<span class="hljs-built_in">twin</span>(), v3, h1_prev-&gt;<span class="hljs-built_in">edge</span>(), newF1);<br>    h2_prev-&gt;<span class="hljs-built_in">setNeighbors</span>(newH4, h2_prev-&gt;<span class="hljs-built_in">twin</span>(), v4, h2_prev-&gt;<span class="hljs-built_in">edge</span>(), newF4);<br><br>    v1-&gt;<span class="hljs-built_in">halfedge</span>() = newH1;<br>    v2-&gt;<span class="hljs-built_in">halfedge</span>() = newH4;<br>    v3-&gt;<span class="hljs-built_in">halfedge</span>() = newH6;<br>    v4-&gt;<span class="hljs-built_in">halfedge</span>() = newH7;<br>    newVertexIter-&gt;<span class="hljs-built_in">halfedge</span>() = newH2;<br><br>    newE1-&gt;<span class="hljs-built_in">halfedge</span>() = newH1;<br>    <span class="hljs-comment">//newE1-&gt;isNew = true;</span><br>    newE2-&gt;<span class="hljs-built_in">halfedge</span>() = newH3;<br>    <span class="hljs-comment">//newE2-&gt;isNew = true;</span><br>    newE3-&gt;<span class="hljs-built_in">halfedge</span>() = newH5;<br>    newE3-&gt;isNew = <span class="hljs-literal">true</span>;<br>    newE4-&gt;<span class="hljs-built_in">halfedge</span>() = newH7;<br>    newE4-&gt;isNew = <span class="hljs-literal">true</span>;<br><br>    E1-&gt;<span class="hljs-built_in">halfedge</span>() = h1_next;<br>    E2-&gt;<span class="hljs-built_in">halfedge</span>() = h2_next;<br>    E3-&gt;<span class="hljs-built_in">halfedge</span>() = h1_prev;<br>    E4-&gt;<span class="hljs-built_in">halfedge</span>() = h2_prev;<br><br>    newF1-&gt;<span class="hljs-built_in">halfedge</span>() = newH1;<br>    newF2-&gt;<span class="hljs-built_in">halfedge</span>() = newH2;<br>    newF3-&gt;<span class="hljs-built_in">halfedge</span>() = newH3;<br>    newF4-&gt;<span class="hljs-built_in">halfedge</span>() = newH4;<br><br><br>    <span class="hljs-keyword">return</span> newVertexIter;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这个代码，我可以实现边分割操作：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 33%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/11.jpg" alt="Image 11" style="width: 100%;">    <span>分割一条边</span></div>    <div style="width: 33%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/12.jpg" alt="Image 12" style="width: 100%;">        <span>多次分割一条边</span></div>    <div style="width: 33%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/13.jpg" alt="Image 13" style="width: 100%;">        <span>分割边与翻转边组合</span></div></div><h3 id="6-利用Loop-Subdivision进行网格上采样"><a href="#6-利用Loop-Subdivision进行网格上采样" class="headerlink" title="6.利用Loop Subdivision进行网格上采样"></a>6.利用Loop Subdivision进行网格上采样</h3><p>我的loop细分主要分为以下几个步骤：</p><p>① 先把网格中所有点和所有边的isNew置为false：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (VertexIter v = mesh.<span class="hljs-built_in">verticesBegin</span>(); v != mesh.<span class="hljs-built_in">verticesEnd</span>(); v++) &#123;<br>    v-&gt;isNew = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (EdgeIter e = mesh.<span class="hljs-built_in">edgesBegin</span>(); e != mesh.<span class="hljs-built_in">edgesEnd</span>(); e++) &#123;<br>    e-&gt;isNew = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一步是为了对网格属性进行初始化，避免后续重复细分时因为点和边的isNew未正确设置导致无法细分。</p><p>②对每条边计算出它的中点值，存储到边的newPosition中，然后对每条边进行分割，把分割后的返回的新点的position设置为边的newPosition:<br>$$<br>P_e &#x3D; \frac{3}{8}(P_1 + P_2) + \frac{1}{8}(P_3 + P_4)<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::vector&lt;EdgeIter&gt; edgesToSplit;<br><span class="hljs-keyword">for</span> (EdgeIter e = mesh.<span class="hljs-built_in">edgesBegin</span>(); e != mesh.<span class="hljs-built_in">edgesEnd</span>(); ++e) &#123;<br>    HalfedgeIter h = e-&gt;<span class="hljs-built_in">halfedge</span>();<br>    Vector3D A = h-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>    Vector3D B = h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>    Vector3D C = h-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>    Vector3D D = h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>    e-&gt;newPosition = <span class="hljs-number">3.0f</span> / <span class="hljs-number">8.0f</span> * (A + B) + <span class="hljs-number">1.0f</span> / <span class="hljs-number">8.0f</span> * (C + D);<br>    edgesToSplit.<span class="hljs-built_in">push_back</span>(e);<br>&#125;<br><span class="hljs-keyword">for</span> (EdgeIter e : edgesToSplit) &#123;<br>    VertexIter newVertex = mesh.<span class="hljs-built_in">splitEdge</span>(e);<br>    newVertex-&gt;position = e-&gt;newPosition;<br>&#125;<br></code></pre></td></tr></table></figure><p>③对可以翻转的边进行翻转</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (EdgeIter e = mesh.<span class="hljs-built_in">edgesBegin</span>(); e != mesh.<span class="hljs-built_in">edgesEnd</span>(); ++e) &#123;<br>    <span class="hljs-keyword">if</span> (e-&gt;isNew) &#123;<br>        VertexIter v1 = e-&gt;<span class="hljs-built_in">halfedge</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br>        VertexIter v2 = e-&gt;<span class="hljs-built_in">halfedge</span>()-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br><br>        <span class="hljs-keyword">if</span> ((v1-&gt;isNew &amp;&amp; !v2-&gt;isNew)||(!v1-&gt;isNew &amp;&amp; v2-&gt;isNew)) &#123;<br>            mesh.<span class="hljs-built_in">flipEdge</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先判断是不是新边，再判断这条边是否链接旧顶点和新顶点</p><p>④ 对非新生成的点计算它们在细分后的新位置:<br>$$<br>P’<em>i &#x3D; (1 - n \cdot \beta) P_i + \beta \sum</em>{j&#x3D;1}^{n} P_j<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (VertexIter v = mesh.<span class="hljs-built_in">verticesBegin</span>(); v != mesh.<span class="hljs-built_in">verticesEnd</span>(); ++v) &#123;<br>    <span class="hljs-keyword">if</span> (!v-&gt;isNew) &#123;<br>        <span class="hljs-type">size_t</span> n = v-&gt;<span class="hljs-built_in">degree</span>();<br>        <span class="hljs-type">double</span> u = (n == <span class="hljs-number">3</span>) ? (<span class="hljs-number">3.0</span> / <span class="hljs-number">16.0</span>) : (<span class="hljs-number">3.0</span> / (<span class="hljs-number">8.0</span> * n));<br>        <span class="hljs-function">Vector3D <span class="hljs-title">neighborSum</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>        HalfedgeIter h = v-&gt;<span class="hljs-built_in">halfedge</span>();<br>        HalfedgeIter hStart = h;<br>        <span class="hljs-keyword">do</span> &#123;<br>            neighborSum += h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>            h = h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">next</span>();<br>        &#125; <span class="hljs-keyword">while</span> (h != hStart);<br><br>        v-&gt;newPosition = (<span class="hljs-number">1.0</span> - n * u) * v-&gt;position + u * neighborSum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用这个新位置计算公式可以使细分更加平滑</p><p> ⑤最后更新所有旧点的位置:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (VertexIter v = mesh.<span class="hljs-built_in">verticesBegin</span>(); v != mesh.<span class="hljs-built_in">verticesEnd</span>(); ++v) &#123;<br>    <span class="hljs-keyword">if</span> (!v-&gt;isNew) &#123;<br>        v-&gt;position = v-&gt;newPosition;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是茶壶进行细分的截图：</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/14.png" alt="14"></p><p>进行两次细分后的茶壶，可以看到它的表面已经变得十分光滑</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/15.png" alt="15"></p><p>关闭网格再进行平滑着色，已经十分的完美。</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/16.jpg" alt="Image 16" style="width: 100%;"></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/17.jpg" alt="Image 17" style="width: 100%;"></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/18.jpg" alt="Image 18" style="width: 100%;"></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/19.jpg" alt="Image 19" style="width: 100%;"></div></div><p>对立方体进行四次细分的结果。</p><h2 id="四-实践与思考"><a href="#四-实践与思考" class="headerlink" title="四.实践与思考"></a>四.实践与思考</h2><p>在我进行最后一步loop细分的时候，曾经遇到了两个问题：</p><p>一个是细分不规则：</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/20.png" alt="20"></p><p>这个问题在我调试后发现是我一些边没有通过isNew判定来赋position，于是在边分割中我添加了设置新点和新边的isNew为True的语句，这个问题因此解决。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">newE1-&gt;<span class="hljs-built_in">halfedge</span>() = newH1;<br><span class="hljs-comment">//newE1-&gt;isNew = true;</span><br>newE2-&gt;<span class="hljs-built_in">halfedge</span>() = newH3;<br><span class="hljs-comment">//newE2-&gt;isNew = true;</span><br>newE3-&gt;<span class="hljs-built_in">halfedge</span>() = newH5;<br>newE3-&gt;isNew = <span class="hljs-literal">true</span>;<br>newE4-&gt;<span class="hljs-built_in">halfedge</span>() = newH7;<br>newE4-&gt;isNew = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">Vector3D midpoint = (v1-&gt;position + v2-&gt;position) * <span class="hljs-number">0.5</span>;<br>VertexIter newVertexIter = <span class="hljs-built_in">newVertex</span>();<br>newVertexIter-&gt;position = midpoint;<br>newVertexIter-&gt;isNew = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>第二个问题是我loop细分的图像，在有直角顶点的地方没有正确的变光滑：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/21.jpg" alt="Image 21" style="width: 100%;">    <span>修改前</span></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/2-photo/22.jpg" alt="Image 22" style="width: 100%;">    <span>修改后</span></div></div><p>经过排查，我发现可以再最后再算一次网格中旧顶点的位置来修正这个问题，即上文中loop细分里的步骤⑥。只需要将最后一步的newPosition改为position，这样子细分后的立方体的顶角位置就可以正确进行更新</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">v-&gt;position = (<span class="hljs-number">1.0</span> - n * u) * v-&gt;position + u * newPos;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
      <category>图形学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CG</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
