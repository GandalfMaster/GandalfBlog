<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第一次作业：光栅化三角形</title>
    <link href="/GandalfBlog/2024/02/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <url>/GandalfBlog/2024/02/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="一-前置函数实现"><a href="#一-前置函数实现" class="headerlink" title="一.前置函数实现"></a>一.前置函数实现</h2><p>实现一个函数，来判断点是否在一个三角形的内部.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">insideTriangle</span><span class="hljs-params">(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y, <span class="hljs-type">const</span> Vector3f* _v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    Vector3f point0 = _v[<span class="hljs-number">0</span>];<br>    Vector3f point1 = _v[<span class="hljs-number">1</span>];<br>    Vector3f point2 = _v[<span class="hljs-number">2</span>];<br><br>    <br>    Vector3f vector0 = <span class="hljs-built_in">Vector3f</span>(x - point<span class="hljs-number">0.</span><span class="hljs-built_in">x</span>(), y - point<span class="hljs-number">0.</span><span class="hljs-built_in">y</span>(), <span class="hljs-number">0</span>);<br>    Vector3f vector1 = <span class="hljs-built_in">Vector3f</span>(x - point<span class="hljs-number">1.</span><span class="hljs-built_in">x</span>(), y - point<span class="hljs-number">1.</span><span class="hljs-built_in">y</span>(), <span class="hljs-number">0</span>);<br>    Vector3f vector2 = <span class="hljs-built_in">Vector3f</span>(x - point<span class="hljs-number">2.</span><span class="hljs-built_in">x</span>(), y - point<span class="hljs-number">2.</span><span class="hljs-built_in">y</span>(), <span class="hljs-number">0</span>);<br><br>    <br>    Vector3f edge0 = point1 - point0;<br>    Vector3f edge1 = point2 - point1;<br>    Vector3f edge2 = point0 - point2;<br>    <br>    <span class="hljs-keyword">auto</span> cross0 = edge<span class="hljs-number">0.</span><span class="hljs-built_in">cross</span>(vector0);<br>    <span class="hljs-keyword">auto</span> cross1 = edge<span class="hljs-number">1.</span><span class="hljs-built_in">cross</span>(vector1);<br>    <span class="hljs-keyword">auto</span> cross2 = edge<span class="hljs-number">2.</span><span class="hljs-built_in">cross</span>(vector2);<br>    <br>    <span class="hljs-keyword">if</span> (cross<span class="hljs-number">0.</span><span class="hljs-built_in">z</span>() &gt; <span class="hljs-number">0</span> &amp;&amp; cross<span class="hljs-number">1.</span><span class="hljs-built_in">z</span>() &gt; <span class="hljs-number">0</span> &amp;&amp; cross<span class="hljs-number">2.</span><span class="hljs-built_in">z</span>() &gt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cross<span class="hljs-number">0.</span><span class="hljs-built_in">z</span>() &lt; <span class="hljs-number">0</span> &amp;&amp; cross<span class="hljs-number">1.</span><span class="hljs-built_in">z</span>() &lt; <span class="hljs-number">0</span> &amp;&amp; cross<span class="hljs-number">2.</span><span class="hljs-built_in">z</span>() &lt; <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码通过叉乘来计算出点是否在三角形的内部，主要通过三个叉乘结果的Z值正负是否相同来判断</p><h2 id="二-实现三角形光栅化"><a href="#二-实现三角形光栅化" class="headerlink" title="二.实现三角形光栅化"></a>二.实现三角形光栅化</h2><p>接下来我们可以实现光栅化函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">rasterize_triangle</span>(<span class="hljs-type">const</span> Triangle&amp; t) &#123;<br>    <span class="hljs-keyword">auto</span> v = t.<span class="hljs-built_in">toVector4</span>();<br>    <br>    <br>    <span class="hljs-type">float</span> minX, minY, maxX, maxY;<br>    minX = std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">x</span>(), std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">x</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">x</span>()));<br>    maxX = std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">x</span>(), std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">x</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">x</span>()));<br>    minY = std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">y</span>(), std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">y</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">y</span>()));<br>    maxY = std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">y</span>(), std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">y</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">y</span>()));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = std::<span class="hljs-built_in">floor</span>(minX); x &lt;= std::<span class="hljs-built_in">ceil</span>(maxX); x++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = std::<span class="hljs-built_in">floor</span>(minY); y &lt;= std::<span class="hljs-built_in">ceil</span>(maxY); y++) &#123;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">insideTriangle</span>(x + <span class="hljs-number">0.5</span>, y + <span class="hljs-number">0.5</span>, t.v)) &#123;<br>                <span class="hljs-type">float</span> alpha, beta, gamma;<br>                std::<span class="hljs-built_in">tie</span>(alpha, beta, gamma) = <span class="hljs-built_in">computeBarycentric2D</span>(x, y, t.v);<br>                <span class="hljs-type">float</span> w_reciprocal = <span class="hljs-number">1.0</span>/(alpha / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>());<br>                <span class="hljs-type">float</span> z_interpolated = alpha * v[<span class="hljs-number">0</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta * v[<span class="hljs-number">1</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma * v[<span class="hljs-number">2</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>();<br>                z_interpolated *= w_reciprocal;<br><br>                <span class="hljs-type">int</span> index = <span class="hljs-built_in">get_index</span>(x, y);<br>                <span class="hljs-keyword">if</span> (z_interpolated &lt; depth_buf[index]) &#123;<br>                    depth_buf[index] = z_interpolated;<br>                    <span class="hljs-keyword">auto</span> color = t.<span class="hljs-built_in">getColor</span>();<br>                    <span class="hljs-built_in">set_pixel</span>(Eigen::<span class="hljs-built_in">Vector3f</span>(x, y, z_interpolated), color);<br>                &#125;<br>            &#125;<br>            <br>            <br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码的实现结果如下，可以看到图像边沿有明显的锯齿感</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/photo/1.png"></p><p>这是因为我们的采样不够细，可以进一步采用超采样来实现</p><h2 id="三-实现超采样光栅化"><a href="#三-实现超采样光栅化" class="headerlink" title="三.实现超采样光栅化"></a>三.实现超采样光栅化</h2><p>现在实现了一个超采样的光栅化函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">super_rasterize_triangle</span>(<span class="hljs-type">const</span> Triangle&amp; t) &#123;<br>    <span class="hljs-keyword">auto</span> v = t.<span class="hljs-built_in">toVector4</span>();<br>    <br>    <br>    <span class="hljs-type">float</span> minX, minY, maxX, maxY;<br>    minX = std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">x</span>(), std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">x</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">x</span>()));<br>    maxX = std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">x</span>(), std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">x</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">x</span>()));<br>    minY = std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">y</span>(), std::<span class="hljs-built_in">min</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">y</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">y</span>()));<br>    maxY = std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">0</span>].<span class="hljs-built_in">y</span>(), std::<span class="hljs-built_in">max</span>(v[<span class="hljs-number">1</span>].<span class="hljs-built_in">y</span>(), v[<span class="hljs-number">2</span>].<span class="hljs-built_in">y</span>()));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = std::<span class="hljs-built_in">floor</span>(minX); x &lt;= std::<span class="hljs-built_in">ceil</span>(maxX); x++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = std::<span class="hljs-built_in">floor</span>(minY); y &lt;= std::<span class="hljs-built_in">ceil</span>(maxY); y++) &#123;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> offset = <span class="hljs-number">0</span>; offset &lt; <span class="hljs-number">4</span>; offset++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">insideTriangle</span>(x + superOffsetX[offset], y + superOffsetY[offset],t.v))&#123;<br>                    <span class="hljs-type">float</span> alpha, beta, gamma;<br>                    std::<span class="hljs-built_in">tie</span>(alpha, beta, gamma) = <span class="hljs-built_in">computeBarycentric2D</span>(x + superOffsetX[offset], y + superOffsetY[offset], t.v);<br>                    <span class="hljs-type">float</span> w_reciprocal = <span class="hljs-number">1.0</span> / (alpha / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>());<br>                    <span class="hljs-type">float</span> z_interpolated = alpha * v[<span class="hljs-number">0</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">0</span>].<span class="hljs-built_in">w</span>() + beta * v[<span class="hljs-number">1</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">1</span>].<span class="hljs-built_in">w</span>() + gamma * v[<span class="hljs-number">2</span>].<span class="hljs-built_in">z</span>() / v[<span class="hljs-number">2</span>].<span class="hljs-built_in">w</span>();<br>                    z_interpolated *= w_reciprocal;<br>                <br>                    <span class="hljs-keyword">if</span> (z_interpolated &lt; super_depth_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + offset % <span class="hljs-number">2</span>,y * <span class="hljs-number">2</span> + offset / <span class="hljs-number">2</span>)]) &#123;<br>                        cnt ++ ;<br>                        super_depth_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + offset % <span class="hljs-number">2</span>,y * <span class="hljs-number">2</span> + offset / <span class="hljs-number">2</span>)] = z_interpolated;<br>                        sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + offset % <span class="hljs-number">2</span>,y * <span class="hljs-number">2</span> + offset / <span class="hljs-number">2</span>)] = t.<span class="hljs-built_in">getColor</span>();<br>                    &#125;<br>                &#125;<br>            <br>            &#125;<br>            <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">0</span>)&#123;<br>                Vector3f point = &#123;(<span class="hljs-type">float</span>)x, (<span class="hljs-type">float</span>)y, <span class="hljs-number">0</span>&#125;;<br>                Vector3f color = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>                color += sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span>, y * <span class="hljs-number">2</span>)];<br>                color += sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, y * <span class="hljs-number">2</span>)];<br>                color += sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span>, y * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)];<br>                color += sample_color_buf[<span class="hljs-built_in">get_super_index</span>(x * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, y * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)];<br>                color /= <span class="hljs-number">4.0f</span>;<br>                <span class="hljs-built_in">set_pixel</span>(point, color);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数把原来的一个单元网格进一步细分，分为四个网格来进行渲染，进一步削弱锯齿感</p><p>通过这个函数，我们可以看到基本实现了平滑的三角形。</p><p><img src="https://gandalfmaster.oss-cn-hangzhou.aliyuncs.com/blog/photo/2.png" alt="2"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekyll</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二次作业：网格编辑</title>
    <link href="/GandalfBlog/2024/02/03/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/"/>
    <url>/GandalfBlog/2024/02/03/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h2><p>这个作业主要实现了贝塞尔曲线和曲面，并通过加权面积的顶点法线实现了曲面的平滑着色。最后实现边翻转和边分割，并凭借这两个函数实现loop细分，使物体更加平滑。</p><h2 id="二-贝塞尔曲线和曲面"><a href="#二-贝塞尔曲线和曲面" class="headerlink" title="二.贝塞尔曲线和曲面"></a>二.贝塞尔曲线和曲面</h2><h3 id="1-基于-1D-de-Casteljau-绘制贝塞尔曲线"><a href="#1-基于-1D-de-Casteljau-绘制贝塞尔曲线" class="headerlink" title="1. 基于 1D de Casteljau 绘制贝塞尔曲线"></a>1. 基于 1D de Casteljau 绘制贝塞尔曲线</h3><p>de Casteljau 算法是一种用于递归计算贝塞尔曲线上任意点的几何算法。它基于控制点的线性插值，并且与贝塞尔曲线的定义完全一致，适用于任何阶数的贝塞尔曲线。算法的核心思想是：通过在相邻控制点之间进行线性插值，逐步计算中间控制点，直到得到曲线上的一个点。它的主要公式是：<br>$$<br>P_0’(t) &#x3D; (1 - t) P_0 + t P_1<br>$$<br>我实现了以下这个函数：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;Vector2D&gt; BezierCurve::evaluateStep(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;Vector2D&gt; const&amp; <span class="hljs-built_in">points</span>)<br>&#123;<br>    size_t size = <span class="hljs-built_in">points</span>.size();<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;Vector2D&gt; res;<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; size - <span class="hljs-number">1</span>; i++) &#123;<br>        Vector2D temp;<br>        temp.x = (<span class="hljs-number">1</span> - t) * <span class="hljs-built_in">points</span>[i].x + t * <span class="hljs-built_in">points</span>[i + <span class="hljs-number">1</span>].x;<br>        temp.y = (<span class="hljs-number">1</span> - t) * <span class="hljs-built_in">points</span>[i].y + t * <span class="hljs-built_in">points</span>[i + <span class="hljs-number">1</span>].y;<br><br>        res.push_back(temp);<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数通过遍历传入的数组，返回这个数组的下一次迭代结果。</p><p>例如：一个size为n的points，经过n-1次这个函数，最终返回的数组将只有一个值</p><p>以下是按E依次迭代和按C显示完整贝塞尔曲线的截图：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <img src="./photo/1.jpg" alt="Image 1" style="width: 32%;">    <img src="./photo/2.jpg" alt="Image 2" style="width: 32%;">    <img src="./photo/3.jpg" alt="Image 3" style="width: 32%;">    <img src="./photo/4.jpg" alt="Image 3" style="width: 32%;">    <img src="./photo/5.jpg" alt="Image 3" style="width: 32%;"></div><h3 id="2-基于1D-de-Cateljau绘制贝塞尔曲面"><a href="#2-基于1D-de-Cateljau绘制贝塞尔曲面" class="headerlink" title="2.基于1D de Cateljau绘制贝塞尔曲面"></a>2.基于1D de Cateljau绘制贝塞尔曲面</h3><p>首先要将贝塞尔曲线迭代转化为贝塞尔曲面迭代，实现以下函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">std::vector&lt;Vector3D&gt; <span class="hljs-title">BezierPatch::evaluateStep</span><span class="hljs-params">(std::vector&lt;Vector3D&gt; <span class="hljs-type">const</span>&amp; points, <span class="hljs-type">double</span> t)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">size_t</span> size = points.<span class="hljs-built_in">size</span>();<br>    std::vector&lt;Vector3D&gt; res;<br>    <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size - <span class="hljs-number">1</span>; i++) &#123;<br>        Vector3D temp;<br>        temp.x = (<span class="hljs-number">1</span> - t) * points[i].x + t * points[i + <span class="hljs-number">1</span>].x;<br>        temp.y = (<span class="hljs-number">1</span> - t) * points[i].y + t * points[i + <span class="hljs-number">1</span>].y;<br>        temp.z = (<span class="hljs-number">1</span> - t) * points[i].z + t * points[i + <span class="hljs-number">1</span>].z;<br><br>        res.<span class="hljs-built_in">push_back</span>(temp);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，这个函数和1部分基本类似，只是将Vertor2D改为Vertor3D。</p><p>接着要实现一次性迭代到一个点的函数，这个函数只需在内部调用前一个evaluateStep函数即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Vector3D <span class="hljs-title">BezierPatch::evaluate1D</span><span class="hljs-params">(std::vector&lt;Vector3D&gt; <span class="hljs-type">const</span> &amp;points, <span class="hljs-type">double</span> t)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;   <br>    std::vector&lt;Vector3D&gt; temp = points;<br>    <span class="hljs-keyword">while</span> (temp.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>        temp = <span class="hljs-built_in">evaluateStep</span>(temp, t);<br>    &#125;<br>    <span class="hljs-keyword">return</span> temp.<span class="hljs-built_in">empty</span>() ? <span class="hljs-built_in">Vector3D</span>() : temp.<span class="hljs-built_in">back</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后要实现贝塞尔曲面的绘制，即在三维空间中先沿u迭代一轮，再把迭代的结果数组沿v迭代一轮，最后返回去贝塞尔曲面的点。这个函数仅需要再内部调用前一个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Vector3D <span class="hljs-title">BezierPatch::evaluate</span><span class="hljs-params">(<span class="hljs-type">double</span> u, <span class="hljs-type">double</span> v)</span> <span class="hljs-type">const</span> </span><br><span class="hljs-function"></span>&#123;  <br>    std::vector&lt;Vector3D&gt; temp;<br>    <span class="hljs-keyword">if</span> (!controlPoints.<span class="hljs-built_in">size</span>())<span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector3D</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; controlPoints.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        temp.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">evaluate1D</span>(controlPoints[i], u));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">evaluate1D</span>(temp, v);<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行这个函数后，我们可以执行控制台命令看到一个茶壶的贝塞尔曲面绘制图像：</p><p> <img src="/GandalfBlog/./photo/6.png" alt="6"></p><h2 id="三-三角网格和半边数据结构"><a href="#三-三角网格和半边数据结构" class="headerlink" title="三.三角网格和半边数据结构"></a>三.三角网格和半边数据结构</h2><h3 id="3-基于面积加权的顶点法线计算"><a href="#3-基于面积加权的顶点法线计算" class="headerlink" title="3. 基于面积加权的顶点法线计算"></a>3. 基于面积加权的顶点法线计算</h3><p>计算基于面积加权的顶点法线有四个步骤：</p><p>① 计算每个面的法线（可以通过cross函数来实现）</p><p>② 计算每个三角形的面积（通过法线计算）</p><p>③ 将每个面和其对应法线的乘积相加</p><p>④ 最后将相加结果归一化，得到最终结果</p><p>以下是实现的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">Vector3D <span class="hljs-title">Vertex::normal</span><span class="hljs-params">( <span class="hljs-type">void</span> )</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    Vector3D res;<br>    HalfedgeCIter h = <span class="hljs-built_in">halfedge</span>();<br><br>    HalfedgeCIter ptr = h;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        Vector3D p0 = h-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>        Vector3D p1 = h-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>        Vector3D p2 = h-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br><br>        Vector3D c = <span class="hljs-built_in">cross</span>(p1 - p0, p2 - p0);<br>        <span class="hljs-comment">//Vector3D c = cross(p0 - p1, p0 - p2);</span><br>        <span class="hljs-comment">//c *= -1;</span><br>        <span class="hljs-type">double</span> area = c.<span class="hljs-built_in">norm</span>() / <span class="hljs-number">2.0</span>;<br>        res += c * area;<br><br>        h = h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">next</span>();<br>    &#125; <span class="hljs-keyword">while</span> (h != ptr);<br><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">unit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>实现这个函数后，可以按Q来对物体进行平滑着色，下面是茶壶平滑着色前后的对比：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <img src="./photo/7.jpg" alt="Image 7" style="width: 49%;">    <img src="./photo/8.jpg" alt="Image 8" style="width: 49%;"></div><p>我关闭了网格显示来使得平滑着色更明显。</p><h3 id="4-边翻转-Edge-Flip"><a href="#4-边翻转-Edge-Flip" class="headerlink" title="4.边翻转(Edge Flip)"></a>4.边翻转(Edge Flip)</h3><p>边翻转有三个操作步骤：</p><p>① 确定相邻三角形</p><p>② 翻转它们的相邻边</p><p>③ 检查翻转的合法性（设置这两个新三角形的相关属性）</p><p>边翻转没有创造任何新边，只是将原有的边所相关的参数重新设置，在我的函数中，为了保险起见，我重新设置了近乎所有相关的属性，即使其中有些是不必要的，这显得我的代码看的有一些臃肿，但是也保证了程序运行的安全性。以下是我的实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">EdgeIter <span class="hljs-title">HalfedgeMesh::flipEdge</span><span class="hljs-params">( EdgeIter e0 )</span></span><br><span class="hljs-function"></span>&#123;<br>    HalfedgeIter h1 = e0-&gt;<span class="hljs-built_in">halfedge</span>();<br>    HalfedgeIter h2 = h1-&gt;<span class="hljs-built_in">twin</span>();<br><br>    <span class="hljs-keyword">if</span> (h1-&gt;<span class="hljs-built_in">isBoundary</span>() || h2-&gt;<span class="hljs-built_in">isBoundary</span>()) &#123;<br>        <span class="hljs-keyword">return</span> e0;<br>    &#125;<br>    VertexIter v1 = h1-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v2 = h2-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v3 = h1-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v4 = h2-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br>    <br><br>    FaceIter f1 = h1-&gt;<span class="hljs-built_in">face</span>();<br>    FaceIter f2 = h2-&gt;<span class="hljs-built_in">face</span>();<br><br>    HalfedgeIter h1_next = h1-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h2_next = h2-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h1_prev = h1_next-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h2_prev = h2_next-&gt;<span class="hljs-built_in">next</span>();<br><br>    EdgeIter e1 = h1_next-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter e2 = h2_next-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter e3 = h1_prev-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter e4 = h2_prev-&gt;<span class="hljs-built_in">edge</span>();<br><br><br>    h1-&gt;<span class="hljs-built_in">setNeighbors</span>(h1_prev, h2, v4, e0, f1);<br>    h2-&gt;<span class="hljs-built_in">setNeighbors</span>(h2_prev, h1, v3, e0, f2);<br><br>    h1_next-&gt;<span class="hljs-built_in">setNeighbors</span>(h2, h1_next-&gt;<span class="hljs-built_in">twin</span>(), v2, h1_next-&gt;<span class="hljs-built_in">edge</span>(), f2);<br>    h2_next-&gt;<span class="hljs-built_in">setNeighbors</span>(h1, h2_next-&gt;<span class="hljs-built_in">twin</span>(), v1, h2_next-&gt;<span class="hljs-built_in">edge</span>(), f1);<br><br>    h1_prev-&gt;<span class="hljs-built_in">setNeighbors</span>(h2_next, h1_prev-&gt;<span class="hljs-built_in">twin</span>(), v3, h1_prev-&gt;<span class="hljs-built_in">edge</span>(), f1);<br>    h2_prev-&gt;<span class="hljs-built_in">setNeighbors</span>(h1_next, h2_prev-&gt;<span class="hljs-built_in">twin</span>(), v4, h2_prev-&gt;<span class="hljs-built_in">edge</span>(), f2);<br><br><br>    f1-&gt;<span class="hljs-built_in">halfedge</span>() = h1;<br>    f2-&gt;<span class="hljs-built_in">halfedge</span>() = h2;<br><br>    e0-&gt;<span class="hljs-built_in">halfedge</span>() = h1;<br>    e1-&gt;<span class="hljs-built_in">halfedge</span>() = h1_next;<br>    e2-&gt;<span class="hljs-built_in">halfedge</span>() = h2_next;<br>    e3-&gt;<span class="hljs-built_in">halfedge</span>() = h1_prev;<br>    e4-&gt;<span class="hljs-built_in">halfedge</span>() = h2_prev;<br><br>    v1-&gt;<span class="hljs-built_in">halfedge</span>() = h2_next;<br>    v2-&gt;<span class="hljs-built_in">halfedge</span>() = h1_next;<br>    v3-&gt;<span class="hljs-built_in">halfedge</span>() = h1_prev;<br>    v4-&gt;<span class="hljs-built_in">halfedge</span>() = h2_prev;<br><br>    <span class="hljs-keyword">return</span> e0;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这个代码我可以对边进行翻转（非边界边）:</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="./photo/11.jpg" alt="Image 1" style="width: 100%;">    <span>翻转边</span></div>    <div style="width: 50%; margin-bottom: 10px; text-align: center;">    <img src="./photo/12.jpg" alt="Image 1" style="width: 100%;">        <span>多次翻转边</span></div></div><h3 id="5-边分割（Edge-Split）"><a href="#5-边分割（Edge-Split）" class="headerlink" title="5.边分割（Edge Split）"></a>5.边分割（Edge Split）</h3><p>边分割需要一下操作步骤：</p><p>① 确定要分割的边</p><p>② 添加新顶点</p><p>③ 更新网格拓扑，维护拓扑结构</p><p>边分割不同边翻转，它需要创建一个新顶点，因此也会创建三条新边，六条新半边以及两个新面。因此我们需要对很多数据进行维护，我依旧采用像边分割一样的思路，把我认为应该维护的属性全部维护，来保证我分割边逻辑的正确性。由于我操作的图形全部都是封闭图形，因此我没有考虑对边界边进行分割。</p><p>以下是我进行边分割的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">VertexIter <span class="hljs-title">HalfedgeMesh::splitEdge</span><span class="hljs-params">(EdgeIter e)</span> </span>&#123;<br>    HalfedgeIter h1 = e-&gt;<span class="hljs-built_in">halfedge</span>();<br>    HalfedgeIter h2 = h1-&gt;<span class="hljs-built_in">twin</span>();<br><br>    <span class="hljs-keyword">if</span> (h1-&gt;<span class="hljs-built_in">isBoundary</span>() || h2-&gt;<span class="hljs-built_in">isBoundary</span>()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">VertexIter</span>(); <br>    &#125;<br><br>    VertexIter v1 = h1-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v2 = h2-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v3 = h1-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br>    VertexIter v4 = h2-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br><br>    HalfedgeIter h1_next = h1-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h2_next = h2-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h1_prev = h1_next-&gt;<span class="hljs-built_in">next</span>();<br>    HalfedgeIter h2_prev = h2_next-&gt;<span class="hljs-built_in">next</span>();<br><br><br>    Vector3D midpoint = (v1-&gt;position + v2-&gt;position) * <span class="hljs-number">0.5</span>;<br>    VertexIter newVertexIter = <span class="hljs-built_in">newVertex</span>();<br>    newVertexIter-&gt;position = midpoint;<br>    newVertexIter-&gt;isNew = <span class="hljs-literal">true</span>;<br><br>    HalfedgeIter newH1 = h1;<br>    HalfedgeIter newH2 = h2;<br>    HalfedgeIter newH3 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH4 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH5 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH6 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH7 = <span class="hljs-built_in">newHalfedge</span>();<br>    HalfedgeIter newH8 = <span class="hljs-built_in">newHalfedge</span>();<br>    <br>    EdgeIter newE1 = h1-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter newE2 = <span class="hljs-built_in">newEdge</span>();<br>    EdgeIter newE3 = <span class="hljs-built_in">newEdge</span>();<br>    EdgeIter newE4 = <span class="hljs-built_in">newEdge</span>();<br><br>    EdgeIter E1 = h1_next-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter E2 = h2_next-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter E3 = h1_prev-&gt;<span class="hljs-built_in">edge</span>();<br>    EdgeIter E4 = h2_prev-&gt;<span class="hljs-built_in">edge</span>();<br><br><br>    FaceIter newF1 = h1-&gt;<span class="hljs-built_in">face</span>();<br>    FaceIter newF2 = h2-&gt;<span class="hljs-built_in">face</span>();<br>    FaceIter newF3 = <span class="hljs-built_in">newFace</span>();<br>    FaceIter newF4 = <span class="hljs-built_in">newFace</span>();<br><br>    newH1-&gt;<span class="hljs-built_in">setNeighbors</span>(newH5, newH2, v1, newE1, newF1);<br>    newH2-&gt;<span class="hljs-built_in">setNeighbors</span>(h2_next, newH1, newVertexIter, newE1, newF2);<br>    newH3-&gt;<span class="hljs-built_in">setNeighbors</span>(h1_next, newH4, newVertexIter, newE2, newF3);<br>    newH4-&gt;<span class="hljs-built_in">setNeighbors</span>(newH8, newH3, v2, newE2, newF4);<br>    newH5-&gt;<span class="hljs-built_in">setNeighbors</span>(h1_prev, newH6, newVertexIter, newE3, newF1);<br>    newH6-&gt;<span class="hljs-built_in">setNeighbors</span>(newH3, newH5, v3, newE3, newF3);<br>    newH7-&gt;<span class="hljs-built_in">setNeighbors</span>(newH2, newH8, v4, newE4, newF2);<br>    newH8-&gt;<span class="hljs-built_in">setNeighbors</span>(h2_prev, newH7, newVertexIter, newE4, newF4);<br><br>    h1_next-&gt;<span class="hljs-built_in">setNeighbors</span>(newH6, h1_next-&gt;<span class="hljs-built_in">twin</span>(), v2, h1_next-&gt;<span class="hljs-built_in">edge</span>(), newF3);<br>    h2_next-&gt;<span class="hljs-built_in">setNeighbors</span>(newH7, h2_next-&gt;<span class="hljs-built_in">twin</span>(), v1, h2_next-&gt;<span class="hljs-built_in">edge</span>(), newF2);<br>    h1_prev-&gt;<span class="hljs-built_in">setNeighbors</span>(newH1, h1_prev-&gt;<span class="hljs-built_in">twin</span>(), v3, h1_prev-&gt;<span class="hljs-built_in">edge</span>(), newF1);<br>    h2_prev-&gt;<span class="hljs-built_in">setNeighbors</span>(newH4, h2_prev-&gt;<span class="hljs-built_in">twin</span>(), v4, h2_prev-&gt;<span class="hljs-built_in">edge</span>(), newF4);<br><br>    v1-&gt;<span class="hljs-built_in">halfedge</span>() = newH1;<br>    v2-&gt;<span class="hljs-built_in">halfedge</span>() = newH4;<br>    v3-&gt;<span class="hljs-built_in">halfedge</span>() = newH6;<br>    v4-&gt;<span class="hljs-built_in">halfedge</span>() = newH7;<br>    newVertexIter-&gt;<span class="hljs-built_in">halfedge</span>() = newH2;<br><br>    newE1-&gt;<span class="hljs-built_in">halfedge</span>() = newH1;<br>    <span class="hljs-comment">//newE1-&gt;isNew = true;</span><br>    newE2-&gt;<span class="hljs-built_in">halfedge</span>() = newH3;<br>    <span class="hljs-comment">//newE2-&gt;isNew = true;</span><br>    newE3-&gt;<span class="hljs-built_in">halfedge</span>() = newH5;<br>    newE3-&gt;isNew = <span class="hljs-literal">true</span>;<br>    newE4-&gt;<span class="hljs-built_in">halfedge</span>() = newH7;<br>    newE4-&gt;isNew = <span class="hljs-literal">true</span>;<br><br>    E1-&gt;<span class="hljs-built_in">halfedge</span>() = h1_next;<br>    E2-&gt;<span class="hljs-built_in">halfedge</span>() = h2_next;<br>    E3-&gt;<span class="hljs-built_in">halfedge</span>() = h1_prev;<br>    E4-&gt;<span class="hljs-built_in">halfedge</span>() = h2_prev;<br><br>    newF1-&gt;<span class="hljs-built_in">halfedge</span>() = newH1;<br>    newF2-&gt;<span class="hljs-built_in">halfedge</span>() = newH2;<br>    newF3-&gt;<span class="hljs-built_in">halfedge</span>() = newH3;<br>    newF4-&gt;<span class="hljs-built_in">halfedge</span>() = newH4;<br><br><br>    <span class="hljs-keyword">return</span> newVertexIter;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过这个代码，我可以实现边分割操作：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <div style="width: 33%; margin-bottom: 10px; text-align: center;">    <img src="./photo/11.jpg" alt="Image 1" style="width: 100%;">    <span>分割一条边</span></div>    <div style="width: 33%; margin-bottom: 10px; text-align: center;">    <img src="./photo/12.jpg" alt="Image 1" style="width: 100%;">        <span>多次分割一条边</span></div>    <div style="width: 33%; margin-bottom: 10px; text-align: center;">    <img src="./photo/13.jpg" alt="Image 1" style="width: 100%;">        <span>分割边与翻转边组合</span></div></div><h3 id="6-利用Loop-Subdivision进行网格上采样"><a href="#6-利用Loop-Subdivision进行网格上采样" class="headerlink" title="6.利用Loop Subdivision进行网格上采样"></a>6.利用Loop Subdivision进行网格上采样</h3><p>我的loop细分主要分为以下几个步骤：</p><p>① 先把网格中所有点和所有边的isNew置为false：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (VertexIter v = mesh.<span class="hljs-built_in">verticesBegin</span>(); v != mesh.<span class="hljs-built_in">verticesEnd</span>(); v++) &#123;<br>    v-&gt;isNew = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (EdgeIter e = mesh.<span class="hljs-built_in">edgesBegin</span>(); e != mesh.<span class="hljs-built_in">edgesEnd</span>(); e++) &#123;<br>    e-&gt;isNew = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一步是为了对网格属性进行初始化，避免后续重复细分时因为点和边的isNew未正确设置导致无法细分。</p><p>②对每条边计算出它的中点值，存储到边的newPosition中，然后对每条边进行分割，把分割后的返回的新点的position设置为边的newPosition:<br>$$<br>P_e &#x3D; \frac{3}{8}(P_1 + P_2) + \frac{1}{8}(P_3 + P_4)<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::vector&lt;EdgeIter&gt; edgesToSplit;<br><span class="hljs-keyword">for</span> (EdgeIter e = mesh.<span class="hljs-built_in">edgesBegin</span>(); e != mesh.<span class="hljs-built_in">edgesEnd</span>(); ++e) &#123;<br>    HalfedgeIter h = e-&gt;<span class="hljs-built_in">halfedge</span>();<br>    Vector3D A = h-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>    Vector3D B = h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>    Vector3D C = h-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>    Vector3D D = h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">next</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>    e-&gt;newPosition = <span class="hljs-number">3.0f</span> / <span class="hljs-number">8.0f</span> * (A + B) + <span class="hljs-number">1.0f</span> / <span class="hljs-number">8.0f</span> * (C + D);<br>    edgesToSplit.<span class="hljs-built_in">push_back</span>(e);<br>&#125;<br><span class="hljs-keyword">for</span> (EdgeIter e : edgesToSplit) &#123;<br>    VertexIter newVertex = mesh.<span class="hljs-built_in">splitEdge</span>(e);<br>    newVertex-&gt;position = e-&gt;newPosition;<br>&#125;<br></code></pre></td></tr></table></figure><p>③对可以翻转的边进行翻转</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (EdgeIter e = mesh.<span class="hljs-built_in">edgesBegin</span>(); e != mesh.<span class="hljs-built_in">edgesEnd</span>(); ++e) &#123;<br>    <span class="hljs-keyword">if</span> (e-&gt;isNew) &#123;<br>        VertexIter v1 = e-&gt;<span class="hljs-built_in">halfedge</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br>        VertexIter v2 = e-&gt;<span class="hljs-built_in">halfedge</span>()-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">vertex</span>();<br><br>        <span class="hljs-keyword">if</span> ((v1-&gt;isNew &amp;&amp; !v2-&gt;isNew)||(!v1-&gt;isNew &amp;&amp; v2-&gt;isNew)) &#123;<br>            mesh.<span class="hljs-built_in">flipEdge</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先判断是不是新边，再判断这条边是否链接旧顶点和新顶点</p><p>④ 对非新生成的点计算它们在细分后的新位置:<br>$$<br>P’<em>i &#x3D; (1 - n \cdot \beta) P_i + \beta \sum</em>{j&#x3D;1}^{n} P_j<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (VertexIter v = mesh.<span class="hljs-built_in">verticesBegin</span>(); v != mesh.<span class="hljs-built_in">verticesEnd</span>(); ++v) &#123;<br>    <span class="hljs-keyword">if</span> (!v-&gt;isNew) &#123;<br>        <span class="hljs-type">size_t</span> n = v-&gt;<span class="hljs-built_in">degree</span>();<br>        <span class="hljs-type">double</span> u = (n == <span class="hljs-number">3</span>) ? (<span class="hljs-number">3.0</span> / <span class="hljs-number">16.0</span>) : (<span class="hljs-number">3.0</span> / (<span class="hljs-number">8.0</span> * n));<br>        <span class="hljs-function">Vector3D <span class="hljs-title">neighborSum</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>        HalfedgeIter h = v-&gt;<span class="hljs-built_in">halfedge</span>();<br>        HalfedgeIter hStart = h;<br>        <span class="hljs-keyword">do</span> &#123;<br>            neighborSum += h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">vertex</span>()-&gt;position;<br>            h = h-&gt;<span class="hljs-built_in">twin</span>()-&gt;<span class="hljs-built_in">next</span>();<br>        &#125; <span class="hljs-keyword">while</span> (h != hStart);<br><br>        v-&gt;newPosition = (<span class="hljs-number">1.0</span> - n * u) * v-&gt;position + u * neighborSum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用这个新位置计算公式可以使细分更加平滑</p><p> ⑤最后更新所有旧点的位置:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span> (VertexIter v = mesh.<span class="hljs-built_in">verticesBegin</span>(); v != mesh.<span class="hljs-built_in">verticesEnd</span>(); ++v) &#123;<br>    <span class="hljs-keyword">if</span> (!v-&gt;isNew) &#123;<br>        v-&gt;position = v-&gt;newPosition;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是茶壶进行细分的截图：</p><p><img src="/GandalfBlog/./photo/14.png" alt="14"></p><p>进行两次细分后的茶壶，可以看到它的表面已经变得十分光滑</p><p><img src="/GandalfBlog/./photo/15.png" alt="15"></p><p>关闭网格再进行平滑着色，已经十分的完美。</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <img src="./photo/16.jpg" alt="Image 7" style="width: 49%;">    <img src="./photo/17.jpg" alt="Image 8" style="width: 49%;">    <img src="./photo/18.jpg" alt="Image 8" style="width: 49%;">    <img src="./photo/19.jpg" alt="Image 8" style="width: 49%;"></div><p>对立方体进行四次细分的结果。</p><h2 id="四-实践与思考"><a href="#四-实践与思考" class="headerlink" title="四.实践与思考"></a>四.实践与思考</h2><p>在我进行最后一步loop细分的时候，曾经遇到了两个问题：</p><p>一个是细分不规则：</p><p><img src="/GandalfBlog/./photo/20.png" alt="20"></p><p>这个问题在我调试后发现是我一些边没有通过isNew判定来赋position，于是在边分割中我添加了设置新点和新边的isNew为True的语句，这个问题因此解决。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">newE1-&gt;<span class="hljs-built_in">halfedge</span>() = newH1;<br><span class="hljs-comment">//newE1-&gt;isNew = true;</span><br>newE2-&gt;<span class="hljs-built_in">halfedge</span>() = newH3;<br><span class="hljs-comment">//newE2-&gt;isNew = true;</span><br>newE3-&gt;<span class="hljs-built_in">halfedge</span>() = newH5;<br>newE3-&gt;isNew = <span class="hljs-literal">true</span>;<br>newE4-&gt;<span class="hljs-built_in">halfedge</span>() = newH7;<br>newE4-&gt;isNew = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">Vector3D midpoint = (v1-&gt;position + v2-&gt;position) * <span class="hljs-number">0.5</span>;<br>VertexIter newVertexIter = <span class="hljs-built_in">newVertex</span>();<br>newVertexIter-&gt;position = midpoint;<br>newVertexIter-&gt;isNew = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>第二个问题是我loop细分的图像，在有直角顶点的地方没有正确的变光滑：</p><div style="display: flex; flex-wrap: wrap; justify-content: flex-start;">    <img src="./photo/21.jpg" alt="Image 7" style="width: 49%;">    <img src="./photo/22.jpg" alt="Image 8" style="width: 49%;"></div><p>经过排查，我发现可以再最后再算一次网格中旧顶点的位置来修正这个问题，即上文中loop细分里的步骤⑥。只需要将最后一步的newPosition改为position，这样子细分后的立方体的顶角位置就可以正确进行更新</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">v-&gt;position = (<span class="hljs-number">1.0</span> - n * u) * v-&gt;position + u * newPos;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekyll</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
